/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using BlackFoxCSharp.Client;
using BlackFoxCSharp.Model;

namespace BlackFoxCSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnOptimizationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void Delete (Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (Guid id);
        /// <summary>
        /// Get id of best model for given generation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>string</returns>
        string GetModelId (Guid id, int generation);

        /// <summary>
        /// Get id of best model for given generation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetModelIdWithHttpInfo (Guid id, int generation);
        /// <summary>
        /// Get status of optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>List&lt;AnnOptimizationStatus&gt;</returns>
        List<AnnOptimizationStatus> GetStatus (Guid id);

        /// <summary>
        /// Get status of optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>ApiResponse of List&lt;AnnOptimizationStatus&gt;</returns>
        ApiResponse<List<AnnOptimizationStatus>> GetStatusWithHttpInfo (Guid id);
        /// <summary>
        /// Starts new optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>Guid</returns>
        Guid Start (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig));

        /// <summary>
        /// Starts new optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> StartWithHttpInfo (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig));
        /// <summary>
        /// Starts new series optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>Guid</returns>
        Guid StartSeries (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig));

        /// <summary>
        /// Starts new series optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> StartSeriesWithHttpInfo (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig));
        /// <summary>
        /// Stop running optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns></returns>
        void Stop (Guid id);

        /// <summary>
        /// Stop running optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopWithHttpInfo (Guid id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Get id of best model for given generation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetModelIdAsync (Guid id, int generation);

        /// <summary>
        /// Get id of best model for given generation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetModelIdAsyncWithHttpInfo (Guid id, int generation);
        /// <summary>
        /// Get status of optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of List&lt;AnnOptimizationStatus&gt;</returns>
        System.Threading.Tasks.Task<List<AnnOptimizationStatus>> GetStatusAsync (Guid id);

        /// <summary>
        /// Get status of optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of ApiResponse (List&lt;AnnOptimizationStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnnOptimizationStatus>>> GetStatusAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Starts new optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> StartAsync (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig));

        /// <summary>
        /// Starts new optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> StartAsyncWithHttpInfo (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig));
        /// <summary>
        /// Starts new series optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> StartSeriesAsync (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig));

        /// <summary>
        /// Starts new series optimization using ann
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> StartSeriesAsyncWithHttpInfo (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig));
        /// <summary>
        /// Stop running optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopAsync (Guid id);

        /// <summary>
        /// Stop running optimization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopAsyncWithHttpInfo (Guid id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnnOptimizationApi : IAnnOptimizationApi
    {
        private BlackFoxCSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnOptimizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnOptimizationApi(String basePath)
        {
            this.Configuration = new BlackFoxCSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnOptimizationApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnnOptimizationApi()
        {
            this.Configuration = BlackFoxCSharp.Client.Configuration.Default;

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnOptimizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnnOptimizationApi(BlackFoxCSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BlackFoxCSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlackFoxCSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlackFoxCSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete (Guid id)
        {
             DeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->Delete");

            var localVarPath = "./api/ann/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (Guid id)
        {
             await DeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->Delete");

            var localVarPath = "./api/ann/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get id of best model for given generation 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>string</returns>
        public string GetModelId (Guid id, int generation)
        {
             ApiResponse<string> localVarResponse = GetModelIdWithHttpInfo(id, generation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get id of best model for given generation 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetModelIdWithHttpInfo (Guid id, int generation)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->GetModelId");
            // verify the required parameter 'generation' is set
            if (generation == null)
                throw new ApiException(400, "Missing required parameter 'generation' when calling AnnOptimizationApi->GetModelId");

            var localVarPath = "./api/ann/{id}/model-id/{generation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (generation != null) localVarPathParams.Add("generation", this.Configuration.ApiClient.ParameterToString(generation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get id of best model for given generation 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetModelIdAsync (Guid id, int generation)
        {
             ApiResponse<string> localVarResponse = await GetModelIdAsyncWithHttpInfo(id, generation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get id of best model for given generation 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">optimization id</param>
        /// <param name="generation">generation</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetModelIdAsyncWithHttpInfo (Guid id, int generation)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->GetModelId");
            // verify the required parameter 'generation' is set
            if (generation == null)
                throw new ApiException(400, "Missing required parameter 'generation' when calling AnnOptimizationApi->GetModelId");

            var localVarPath = "./api/ann/{id}/model-id/{generation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (generation != null) localVarPathParams.Add("generation", this.Configuration.ApiClient.ParameterToString(generation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get status of optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>List&lt;AnnOptimizationStatus&gt;</returns>
        public List<AnnOptimizationStatus> GetStatus (Guid id)
        {
             ApiResponse<List<AnnOptimizationStatus>> localVarResponse = GetStatusWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get status of optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>ApiResponse of List&lt;AnnOptimizationStatus&gt;</returns>
        public ApiResponse<List<AnnOptimizationStatus>> GetStatusWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->GetStatus");

            var localVarPath = "./api/ann/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnnOptimizationStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AnnOptimizationStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnnOptimizationStatus>)));
        }

        /// <summary>
        /// Get status of optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of List&lt;AnnOptimizationStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<AnnOptimizationStatus>> GetStatusAsync (Guid id)
        {
             ApiResponse<List<AnnOptimizationStatus>> localVarResponse = await GetStatusAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get status of optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of ApiResponse (List&lt;AnnOptimizationStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnnOptimizationStatus>>> GetStatusAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->GetStatus");

            var localVarPath = "./api/ann/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnnOptimizationStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AnnOptimizationStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnnOptimizationStatus>)));
        }

        /// <summary>
        /// Starts new optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>Guid</returns>
        public Guid Start (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig))
        {
             ApiResponse<Guid> localVarResponse = StartWithHttpInfo(annOptimizationConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts new optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public ApiResponse<Guid> StartWithHttpInfo (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig))
        {

            var localVarPath = "./api/ann";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annOptimizationConfig != null && annOptimizationConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annOptimizationConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annOptimizationConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Start", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Guid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
        }

        /// <summary>
        /// Starts new optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> StartAsync (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig))
        {
             ApiResponse<Guid> localVarResponse = await StartAsyncWithHttpInfo(annOptimizationConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts new optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annOptimizationConfig">AnnOptimizationConfig (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid>> StartAsyncWithHttpInfo (AnnOptimizationConfig annOptimizationConfig = default(AnnOptimizationConfig))
        {

            var localVarPath = "./api/ann";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annOptimizationConfig != null && annOptimizationConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annOptimizationConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annOptimizationConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Start", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Guid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
        }

        /// <summary>
        /// Starts new series optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid StartSeries (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig))
        {
             ApiResponse<Guid> localVarResponse = StartSeriesWithHttpInfo(annSeriesOptimizationConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts new series optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public ApiResponse<Guid> StartSeriesWithHttpInfo (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig))
        {

            var localVarPath = "./api/ann/series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annSeriesOptimizationConfig != null && annSeriesOptimizationConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annSeriesOptimizationConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annSeriesOptimizationConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Guid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
        }

        /// <summary>
        /// Starts new series optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> StartSeriesAsync (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig))
        {
             ApiResponse<Guid> localVarResponse = await StartSeriesAsyncWithHttpInfo(annSeriesOptimizationConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts new series optimization using ann 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annSeriesOptimizationConfig"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid>> StartSeriesAsyncWithHttpInfo (AnnSeriesOptimizationConfig annSeriesOptimizationConfig = default(AnnSeriesOptimizationConfig))
        {

            var localVarPath = "./api/ann/series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annSeriesOptimizationConfig != null && annSeriesOptimizationConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annSeriesOptimizationConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annSeriesOptimizationConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Guid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
        }

        /// <summary>
        /// Stop running optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns></returns>
        public void Stop (Guid id)
        {
             StopWithHttpInfo(id);
        }

        /// <summary>
        /// Stop running optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StopWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->Stop");

            var localVarPath = "./api/ann/{id}/action/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Stop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Stop running optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopAsync (Guid id)
        {
             await StopAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Stop running optimization 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optimization Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StopAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnnOptimizationApi->Stop");

            var localVarPath = "./api/ann/{id}/action/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Stop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
