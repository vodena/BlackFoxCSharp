/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using BlackFoxCSharp.Client;

namespace BlackFoxCSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download model file (*.h5)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream Get (string id, bool? integrateScaler = null, string networkType = null);

        /// <summary>
        /// Download model file (*.h5)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetWithHttpInfo (string id, bool? integrateScaler = null, string networkType = null);
        /// <summary>
        /// Get model metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Object</returns>
        Object GetMetadata (string id);

        /// <summary>
        /// Get model metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetMetadataWithHttpInfo (string id);
        /// <summary>
        /// Check if h5 file exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns></returns>
        void Head (string id);

        /// <summary>
        /// Check if h5 file exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadWithHttpInfo (string id);
        /// <summary>
        /// Upload model(h5 file)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>string</returns>
        string Post (System.IO.Stream file = null);

        /// <summary>
        /// Upload model(h5 file)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostWithHttpInfo (System.IO.Stream file = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download model file (*.h5)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAsync (string id, bool? integrateScaler = null, string networkType = null);

        /// <summary>
        /// Download model file (*.h5)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAsyncWithHttpInfo (string id, bool? integrateScaler = null, string networkType = null);
        /// <summary>
        /// Get model metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetMetadataAsync (string id);

        /// <summary>
        /// Get model metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMetadataAsyncWithHttpInfo (string id);
        /// <summary>
        /// Check if h5 file exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadAsync (string id);

        /// <summary>
        /// Check if h5 file exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Upload model(h5 file)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostAsync (System.IO.Stream file = null);

        /// <summary>
        /// Upload model(h5 file)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostAsyncWithHttpInfo (System.IO.Stream file = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NetworkApi : INetworkApi
    {
        private BlackFoxCSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkApi(String basePath)
        {
            this.Configuration = new BlackFoxCSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkApi(BlackFoxCSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BlackFoxCSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlackFoxCSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlackFoxCSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download model file (*.h5) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream Get (string id, bool? integrateScaler = null, string networkType = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetWithHttpInfo(id, integrateScaler, networkType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download model file (*.h5) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetWithHttpInfo (string id, bool? integrateScaler = null, string networkType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkApi->Get");

            var localVarPath = "./api/network/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (integrateScaler != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrateScaler", integrateScaler)); // query parameter
            if (networkType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkType", networkType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download model file (*.h5) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAsync (string id, bool? integrateScaler = null, string networkType = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetAsyncWithHttpInfo(id, integrateScaler, networkType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download model file (*.h5) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File hash(sha1)</param>
        /// <param name="integrateScaler">Integrate scaler in model (optional, default to false)</param>
        /// <param name="networkType">h5, onnx, pb (optional, default to h5)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAsyncWithHttpInfo (string id, bool? integrateScaler = null, string networkType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkApi->Get");

            var localVarPath = "./api/network/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (integrateScaler != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrateScaler", integrateScaler)); // query parameter
            if (networkType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkType", networkType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get model metadata 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Object</returns>
        public Object GetMetadata (string id)
        {
             ApiResponse<Object> localVarResponse = GetMetadataWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get model metadata 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetMetadataWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkApi->GetMetadata");

            var localVarPath = "./api/network/{id}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get model metadata 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetMetadataAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await GetMetadataAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get model metadata 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMetadataAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkApi->GetMetadata");

            var localVarPath = "./api/network/{id}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Check if h5 file exist 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns></returns>
        public void Head (string id)
        {
             HeadWithHttpInfo(id);
        }

        /// <summary>
        /// Check if h5 file exist 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkApi->Head");

            var localVarPath = "./api/network/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Head", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check if h5 file exist 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadAsync (string id)
        {
             await HeadAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Check if h5 file exist 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model Id (sha1)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkApi->Head");

            var localVarPath = "./api/network/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Head", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload model(h5 file) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>string</returns>
        public string Post (System.IO.Stream file = null)
        {
             ApiResponse<string> localVarResponse = PostWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload model(h5 file) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostWithHttpInfo (System.IO.Stream file = null)
        {

            var localVarPath = "./api/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload model(h5 file) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostAsync (System.IO.Stream file = null)
        {
             ApiResponse<string> localVarResponse = await PostAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload model(h5 file) 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostAsyncWithHttpInfo (System.IO.Stream file = null)
        {

            var localVarPath = "./api/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
