/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using BlackFoxCSharp.Client;
using BlackFoxCSharp.Model;

namespace BlackFoxCSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnPredictionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Predict values from array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>List&lt;List&lt;double&gt;&gt;</returns>
        List<List<double>> PredictFromArray (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig));

        /// <summary>
        /// Predict values from array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>ApiResponse of List&lt;List&lt;double&gt;&gt;</returns>
        ApiResponse<List<List<double>>> PredictFromArrayWithHttpInfo (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig));
        /// <summary>
        /// Predict values from file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>string</returns>
        string PredictFromFile (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig));

        /// <summary>
        /// Predict values from file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PredictFromFileWithHttpInfo (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Predict values from array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>Task of List&lt;List&lt;double&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<List<double>>> PredictFromArrayAsync (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig));

        /// <summary>
        /// Predict values from array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;List&lt;double&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<List<double>>>> PredictFromArrayAsyncWithHttpInfo (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig));
        /// <summary>
        /// Predict values from file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PredictFromFileAsync (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig));

        /// <summary>
        /// Predict values from file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PredictFromFileAsyncWithHttpInfo (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnnPredictionApi : IAnnPredictionApi
    {
        private BlackFoxCSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnPredictionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnPredictionApi(String basePath)
        {
            this.Configuration = new BlackFoxCSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnPredictionApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnnPredictionApi()
        {
            this.Configuration = BlackFoxCSharp.Client.Configuration.Default;

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnPredictionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnnPredictionApi(BlackFoxCSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BlackFoxCSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BlackFoxCSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlackFoxCSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlackFoxCSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Predict values from array 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>List&lt;List&lt;double&gt;&gt;</returns>
        public List<List<double>> PredictFromArray (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig))
        {
             ApiResponse<List<List<double>>> localVarResponse = PredictFromArrayWithHttpInfo(predictionArrayConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predict values from array 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>ApiResponse of List&lt;List&lt;double&gt;&gt;</returns>
        public ApiResponse<List<List<double>>> PredictFromArrayWithHttpInfo (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig))
        {

            var localVarPath = "./api/ann/prediction/array";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictionArrayConfig != null && predictionArrayConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(predictionArrayConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predictionArrayConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictFromArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<List<double>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<List<double>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<List<double>>)));
        }

        /// <summary>
        /// Predict values from array 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>Task of List&lt;List&lt;double&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<List<double>>> PredictFromArrayAsync (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig))
        {
             ApiResponse<List<List<double>>> localVarResponse = await PredictFromArrayAsyncWithHttpInfo(predictionArrayConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predict values from array 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionArrayConfig">PredictionArrayConfig (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;List&lt;double&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<List<double>>>> PredictFromArrayAsyncWithHttpInfo (PredictionArrayConfig predictionArrayConfig = default(PredictionArrayConfig))
        {

            var localVarPath = "./api/ann/prediction/array";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictionArrayConfig != null && predictionArrayConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(predictionArrayConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predictionArrayConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictFromArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<List<double>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<List<double>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<List<double>>)));
        }

        /// <summary>
        /// Predict values from file 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>string</returns>
        public string PredictFromFile (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig))
        {
             ApiResponse<string> localVarResponse = PredictFromFileWithHttpInfo(predictionFileConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predict values from file 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PredictFromFileWithHttpInfo (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig))
        {

            var localVarPath = "./api/ann/prediction/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictionFileConfig != null && predictionFileConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(predictionFileConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predictionFileConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictFromFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Predict values from file 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PredictFromFileAsync (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig))
        {
             ApiResponse<string> localVarResponse = await PredictFromFileAsyncWithHttpInfo(predictionFileConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predict values from file 
        /// </summary>
        /// <exception cref="BlackFoxCSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictionFileConfig"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PredictFromFileAsyncWithHttpInfo (PredictionFileConfig predictionFileConfig = default(PredictionFileConfig))
        {

            var localVarPath = "./api/ann/prediction/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictionFileConfig != null && predictionFileConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(predictionFileConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predictionFileConfig; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictFromFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
