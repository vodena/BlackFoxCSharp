/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// KerasTrainingConfig
    /// </summary>
    [DataContract]
    public partial class KerasTrainingConfig :  IEquatable<KerasTrainingConfig>
    {
        /// <summary>
        /// Defines TrainingAlgorithm
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrainingAlgorithmEnum
        {
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 1,
            
            /// <summary>
            /// Enum RMSprop for value: RMSprop
            /// </summary>
            [EnumMember(Value = "RMSprop")]
            RMSprop = 2,
            
            /// <summary>
            /// Enum Adagrad for value: Adagrad
            /// </summary>
            [EnumMember(Value = "Adagrad")]
            Adagrad = 3,
            
            /// <summary>
            /// Enum Adadelta for value: Adadelta
            /// </summary>
            [EnumMember(Value = "Adadelta")]
            Adadelta = 4,
            
            /// <summary>
            /// Enum Adam for value: Adam
            /// </summary>
            [EnumMember(Value = "Adam")]
            Adam = 5,
            
            /// <summary>
            /// Enum Adamax for value: Adamax
            /// </summary>
            [EnumMember(Value = "Adamax")]
            Adamax = 6,
            
            /// <summary>
            /// Enum Nadam for value: Nadam
            /// </summary>
            [EnumMember(Value = "Nadam")]
            Nadam = 7
        }

        /// <summary>
        /// Gets or Sets TrainingAlgorithm
        /// </summary>
        [DataMember(Name="trainingAlgorithm", EmitDefaultValue=false)]
        public TrainingAlgorithmEnum? TrainingAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasTrainingConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KerasTrainingConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasTrainingConfig" /> class.
        /// </summary>
        /// <param name="batchSize">batchSize.</param>
        /// <param name="datasetId">datasetId.</param>
        /// <param name="inputRanges">inputRanges.</param>
        /// <param name="outputLayer">outputLayer.</param>
        /// <param name="hiddenLayerConfigs">hiddenLayerConfigs.</param>
        /// <param name="trainingAlgorithm">trainingAlgorithm.</param>
        /// <param name="maxEpoch">maxEpoch (required).</param>
        /// <param name="crossValidation">crossValidation.</param>
        /// <param name="validationSplit">validationSplit (required).</param>
        /// <param name="randomSeed">randomSeed.</param>
        public KerasTrainingConfig(int? batchSize = default(int?), string datasetId = default(string), List<Range> inputRanges = default(List<Range>), KerasLayerConfig outputLayer = default(KerasLayerConfig), List<KerasHiddenLayerConfig> hiddenLayerConfigs = default(List<KerasHiddenLayerConfig>), TrainingAlgorithmEnum? trainingAlgorithm = default(TrainingAlgorithmEnum?), int? maxEpoch = default(int?), bool? crossValidation = default(bool?), double? validationSplit = default(double?), int? randomSeed = default(int?))
        {
            // to ensure "maxEpoch" is required (not null)
            if (maxEpoch == null)
            {
                throw new InvalidDataException("maxEpoch is a required property for KerasTrainingConfig and cannot be null");
            }
            else
            {
                this.MaxEpoch = maxEpoch;
            }
            // to ensure "validationSplit" is required (not null)
            if (validationSplit == null)
            {
                throw new InvalidDataException("validationSplit is a required property for KerasTrainingConfig and cannot be null");
            }
            else
            {
                this.ValidationSplit = validationSplit;
            }
            this.BatchSize = batchSize;
            this.DatasetId = datasetId;
            this.InputRanges = inputRanges;
            this.OutputLayer = outputLayer;
            this.HiddenLayerConfigs = hiddenLayerConfigs;
            this.TrainingAlgorithm = trainingAlgorithm;
            this.CrossValidation = crossValidation;
            this.RandomSeed = randomSeed;
        }
        
        /// <summary>
        /// Gets or Sets BatchSize
        /// </summary>
        [DataMember(Name="batchSize", EmitDefaultValue=false)]
        public int? BatchSize { get; set; }

        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name="datasetId", EmitDefaultValue=false)]
        public string DatasetId { get; set; }

        /// <summary>
        /// Gets or Sets InputRanges
        /// </summary>
        [DataMember(Name="inputRanges", EmitDefaultValue=false)]
        public List<Range> InputRanges { get; set; }

        /// <summary>
        /// Gets or Sets OutputLayer
        /// </summary>
        [DataMember(Name="outputLayer", EmitDefaultValue=false)]
        public KerasLayerConfig OutputLayer { get; set; }

        /// <summary>
        /// Gets or Sets HiddenLayerConfigs
        /// </summary>
        [DataMember(Name="hiddenLayerConfigs", EmitDefaultValue=false)]
        public List<KerasHiddenLayerConfig> HiddenLayerConfigs { get; set; }


        /// <summary>
        /// Gets or Sets MaxEpoch
        /// </summary>
        [DataMember(Name="maxEpoch", EmitDefaultValue=false)]
        public int? MaxEpoch { get; set; }

        /// <summary>
        /// Gets or Sets CrossValidation
        /// </summary>
        [DataMember(Name="crossValidation", EmitDefaultValue=false)]
        public bool? CrossValidation { get; set; }

        /// <summary>
        /// Gets or Sets ValidationSplit
        /// </summary>
        [DataMember(Name="validationSplit", EmitDefaultValue=false)]
        public double? ValidationSplit { get; set; }

        /// <summary>
        /// Gets or Sets RandomSeed
        /// </summary>
        [DataMember(Name="randomSeed", EmitDefaultValue=false)]
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KerasTrainingConfig {\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  InputRanges: ").Append(InputRanges).Append("\n");
            sb.Append("  OutputLayer: ").Append(OutputLayer).Append("\n");
            sb.Append("  HiddenLayerConfigs: ").Append(HiddenLayerConfigs).Append("\n");
            sb.Append("  TrainingAlgorithm: ").Append(TrainingAlgorithm).Append("\n");
            sb.Append("  MaxEpoch: ").Append(MaxEpoch).Append("\n");
            sb.Append("  CrossValidation: ").Append(CrossValidation).Append("\n");
            sb.Append("  ValidationSplit: ").Append(ValidationSplit).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerasTrainingConfig);
        }

        /// <summary>
        /// Returns true if KerasTrainingConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of KerasTrainingConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerasTrainingConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                ) && 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                ) && 
                (
                    this.InputRanges == input.InputRanges ||
                    this.InputRanges != null &&
                    this.InputRanges.SequenceEqual(input.InputRanges)
                ) && 
                (
                    this.OutputLayer == input.OutputLayer ||
                    (this.OutputLayer != null &&
                    this.OutputLayer.Equals(input.OutputLayer))
                ) && 
                (
                    this.HiddenLayerConfigs == input.HiddenLayerConfigs ||
                    this.HiddenLayerConfigs != null &&
                    this.HiddenLayerConfigs.SequenceEqual(input.HiddenLayerConfigs)
                ) && 
                (
                    this.TrainingAlgorithm == input.TrainingAlgorithm ||
                    (this.TrainingAlgorithm != null &&
                    this.TrainingAlgorithm.Equals(input.TrainingAlgorithm))
                ) && 
                (
                    this.MaxEpoch == input.MaxEpoch ||
                    (this.MaxEpoch != null &&
                    this.MaxEpoch.Equals(input.MaxEpoch))
                ) && 
                (
                    this.CrossValidation == input.CrossValidation ||
                    (this.CrossValidation != null &&
                    this.CrossValidation.Equals(input.CrossValidation))
                ) && 
                (
                    this.ValidationSplit == input.ValidationSplit ||
                    (this.ValidationSplit != null &&
                    this.ValidationSplit.Equals(input.ValidationSplit))
                ) && 
                (
                    this.RandomSeed == input.RandomSeed ||
                    (this.RandomSeed != null &&
                    this.RandomSeed.Equals(input.RandomSeed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                if (this.InputRanges != null)
                    hashCode = hashCode * 59 + this.InputRanges.GetHashCode();
                if (this.OutputLayer != null)
                    hashCode = hashCode * 59 + this.OutputLayer.GetHashCode();
                if (this.HiddenLayerConfigs != null)
                    hashCode = hashCode * 59 + this.HiddenLayerConfigs.GetHashCode();
                if (this.TrainingAlgorithm != null)
                    hashCode = hashCode * 59 + this.TrainingAlgorithm.GetHashCode();
                if (this.MaxEpoch != null)
                    hashCode = hashCode * 59 + this.MaxEpoch.GetHashCode();
                if (this.CrossValidation != null)
                    hashCode = hashCode * 59 + this.CrossValidation.GetHashCode();
                if (this.ValidationSplit != null)
                    hashCode = hashCode * 59 + this.ValidationSplit.GetHashCode();
                if (this.RandomSeed != null)
                    hashCode = hashCode * 59 + this.RandomSeed.GetHashCode();
                return hashCode;
            }
        }
    }

}
