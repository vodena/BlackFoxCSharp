/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = BlackFoxCSharp.Client.OpenAPIDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// Configuration for output column (target)
    /// </summary>
    [DataContract]
    public partial class OutputConfig :  IEquatable<OutputConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputConfig" /> class.
        /// </summary>
        /// <param name="range">Min and max value for output.</param>
        /// <param name="encoding">Whether to encode output(target) (default to false).</param>
        public OutputConfig(Range range = default(Range), bool encoding = false)
        {
            this.Range = range;
            this.Range = range;
            // use default value if no "encoding" provided
            if (encoding == null)
            {
                this.Encoding = false;
            }
            else
            {
                this.Encoding = encoding;
            }
        }

        public OutputConfig() { }

        /// <summary>
        /// Min and max value for output
        /// </summary>
        /// <value>Min and max value for output</value>
        [DataMember(Name="range", EmitDefaultValue=true)]
        public Range Range { get; set; }

        /// <summary>
        /// Whether to encode output(target)
        /// </summary>
        /// <value>Whether to encode output(target)</value>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public bool Encoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutputConfig {\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputConfig);
        }

        /// <summary>
        /// Returns true if OutputConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                return hashCode;
            }
        }
    }

}
