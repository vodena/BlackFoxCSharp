/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// KerasRecurrentOptimizationConfig
    /// </summary>
    [DataContract]
    public partial class KerasRecurrentOptimizationConfig :  IEquatable<KerasRecurrentOptimizationConfig>
    {
        /// <summary>
        /// Defines TrainingAlgorithms
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrainingAlgorithmsEnum
        {
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 1,
            
            /// <summary>
            /// Enum RMSprop for value: RMSprop
            /// </summary>
            [EnumMember(Value = "RMSprop")]
            RMSprop = 2,
            
            /// <summary>
            /// Enum Adagrad for value: Adagrad
            /// </summary>
            [EnumMember(Value = "Adagrad")]
            Adagrad = 3,
            
            /// <summary>
            /// Enum Adadelta for value: Adadelta
            /// </summary>
            [EnumMember(Value = "Adadelta")]
            Adadelta = 4,
            
            /// <summary>
            /// Enum Adam for value: Adam
            /// </summary>
            [EnumMember(Value = "Adam")]
            Adam = 5,
            
            /// <summary>
            /// Enum Adamax for value: Adamax
            /// </summary>
            [EnumMember(Value = "Adamax")]
            Adamax = 6,
            
            /// <summary>
            /// Enum Nadam for value: Nadam
            /// </summary>
            [EnumMember(Value = "Nadam")]
            Nadam = 7
        }


        /// <summary>
        /// List of training algorithms to use
        /// </summary>
        /// <value>List of training algorithms to use</value>
        [DataMember(Name="trainingAlgorithms", EmitDefaultValue=false)]
        public List<TrainingAlgorithmsEnum> TrainingAlgorithms { get; set; }
        /// <summary>
        /// Defines ActivationFunctions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivationFunctionsEnum
        {
            
            /// <summary>
            /// Enum SoftMax for value: SoftMax
            /// </summary>
            [EnumMember(Value = "SoftMax")]
            SoftMax = 1,
            
            /// <summary>
            /// Enum Elu for value: Elu
            /// </summary>
            [EnumMember(Value = "Elu")]
            Elu = 2,
            
            /// <summary>
            /// Enum Selu for value: Selu
            /// </summary>
            [EnumMember(Value = "Selu")]
            Selu = 3,
            
            /// <summary>
            /// Enum SoftPlus for value: SoftPlus
            /// </summary>
            [EnumMember(Value = "SoftPlus")]
            SoftPlus = 4,
            
            /// <summary>
            /// Enum SoftSign for value: SoftSign
            /// </summary>
            [EnumMember(Value = "SoftSign")]
            SoftSign = 5,
            
            /// <summary>
            /// Enum ReLu for value: ReLu
            /// </summary>
            [EnumMember(Value = "ReLu")]
            ReLu = 6,
            
            /// <summary>
            /// Enum TanH for value: TanH
            /// </summary>
            [EnumMember(Value = "TanH")]
            TanH = 7,
            
            /// <summary>
            /// Enum Sigmoid for value: Sigmoid
            /// </summary>
            [EnumMember(Value = "Sigmoid")]
            Sigmoid = 8,
            
            /// <summary>
            /// Enum HardSigmoid for value: HardSigmoid
            /// </summary>
            [EnumMember(Value = "HardSigmoid")]
            HardSigmoid = 9,
            
            /// <summary>
            /// Enum Linear for value: Linear
            /// </summary>
            [EnumMember(Value = "Linear")]
            Linear = 10
        }


        /// <summary>
        /// List of activation functions to use
        /// </summary>
        /// <value>List of activation functions to use</value>
        [DataMember(Name="activationFunctions", EmitDefaultValue=false)]
        public List<ActivationFunctionsEnum> ActivationFunctions { get; set; }
        /// <summary>
        /// Defines RecurrentActivationFunctions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecurrentActivationFunctionsEnum
        {
            
            /// <summary>
            /// Enum SoftMax for value: SoftMax
            /// </summary>
            [EnumMember(Value = "SoftMax")]
            SoftMax = 1,
            
            /// <summary>
            /// Enum Elu for value: Elu
            /// </summary>
            [EnumMember(Value = "Elu")]
            Elu = 2,
            
            /// <summary>
            /// Enum Selu for value: Selu
            /// </summary>
            [EnumMember(Value = "Selu")]
            Selu = 3,
            
            /// <summary>
            /// Enum SoftPlus for value: SoftPlus
            /// </summary>
            [EnumMember(Value = "SoftPlus")]
            SoftPlus = 4,
            
            /// <summary>
            /// Enum SoftSign for value: SoftSign
            /// </summary>
            [EnumMember(Value = "SoftSign")]
            SoftSign = 5,
            
            /// <summary>
            /// Enum ReLu for value: ReLu
            /// </summary>
            [EnumMember(Value = "ReLu")]
            ReLu = 6,
            
            /// <summary>
            /// Enum TanH for value: TanH
            /// </summary>
            [EnumMember(Value = "TanH")]
            TanH = 7,
            
            /// <summary>
            /// Enum Sigmoid for value: Sigmoid
            /// </summary>
            [EnumMember(Value = "Sigmoid")]
            Sigmoid = 8,
            
            /// <summary>
            /// Enum HardSigmoid for value: HardSigmoid
            /// </summary>
            [EnumMember(Value = "HardSigmoid")]
            HardSigmoid = 9,
            
            /// <summary>
            /// Enum Linear for value: Linear
            /// </summary>
            [EnumMember(Value = "Linear")]
            Linear = 10
        }


        /// <summary>
        /// List of recurrent activation functions to use
        /// </summary>
        /// <value>List of recurrent activation functions to use</value>
        [DataMember(Name="recurrentActivationFunctions", EmitDefaultValue=false)]
        public List<RecurrentActivationFunctionsEnum> RecurrentActivationFunctions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasRecurrentOptimizationConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KerasRecurrentOptimizationConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasRecurrentOptimizationConfig" /> class.
        /// </summary>
        /// <param name="dropout">dropout.</param>
        /// <param name="batchSize">batchSize.</param>
        /// <param name="recurrentDropout">recurrentDropout.</param>
        /// <param name="recurrentOutputCount">recurrentOutputCount.</param>
        /// <param name="datasetId">Data set id on which to train network.</param>
        /// <param name="inputs">Define min and max value for each output column(feature), and is input optional.</param>
        /// <param name="outputRanges">Define min and max value for each output column(feature).</param>
        /// <param name="hiddenLayerCountRange">Range in which to search number of hidden layers.</param>
        /// <param name="neuronsPerLayer">Range in which to search number of neurons per layer.</param>
        /// <param name="trainingAlgorithms">List of training algorithms to use.</param>
        /// <param name="activationFunctions">List of activation functions to use.</param>
        /// <param name="recurrentActivationFunctions">List of recurrent activation functions to use.</param>
        /// <param name="maxEpoch">Maximum number of epoch (required).</param>
        /// <param name="validationSplit">Portion of data set to use for validation, must be between 0 and 1. (required).</param>
        /// <param name="randomSeed">Random number generator seed, if the value is zero, the rows will not be randomly shuffled.</param>
        /// <param name="recurrentInputCountRange">Range in which to search number of recurrent inputs.</param>
        /// <param name="engineConfig">Optimization engine config.</param>
        public KerasRecurrentOptimizationConfig(Range dropout = default(Range), int? batchSize = default(int?), Range recurrentDropout = default(Range), int? recurrentOutputCount = default(int?), string datasetId = default(string), List<InputConfig> inputs = default(List<InputConfig>), List<Range> outputRanges = default(List<Range>), Range hiddenLayerCountRange = default(Range), Range neuronsPerLayer = default(Range), List<TrainingAlgorithmsEnum> trainingAlgorithms = default(List<TrainingAlgorithmsEnum>), List<ActivationFunctionsEnum> activationFunctions = default(List<ActivationFunctionsEnum>), List<RecurrentActivationFunctionsEnum> recurrentActivationFunctions = default(List<RecurrentActivationFunctionsEnum>), int? maxEpoch = default(int?), double? validationSplit = default(double?), int? randomSeed = default(int?), Range recurrentInputCountRange = default(Range), RecurrentOptimizationEngineConfig engineConfig = default(RecurrentOptimizationEngineConfig))
        {
            // to ensure "maxEpoch" is required (not null)
            if (maxEpoch == null)
            {
                throw new InvalidDataException("maxEpoch is a required property for KerasRecurrentOptimizationConfig and cannot be null");
            }
            else
            {
                this.MaxEpoch = maxEpoch;
            }
            // to ensure "validationSplit" is required (not null)
            if (validationSplit == null)
            {
                throw new InvalidDataException("validationSplit is a required property for KerasRecurrentOptimizationConfig and cannot be null");
            }
            else
            {
                this.ValidationSplit = validationSplit;
            }
            this.Dropout = dropout;
            this.BatchSize = batchSize;
            this.RecurrentDropout = recurrentDropout;
            this.RecurrentOutputCount = recurrentOutputCount;
            this.DatasetId = datasetId;
            this.Inputs = inputs;
            this.OutputRanges = outputRanges;
            this.HiddenLayerCountRange = hiddenLayerCountRange;
            this.NeuronsPerLayer = neuronsPerLayer;
            this.TrainingAlgorithms = trainingAlgorithms;
            this.ActivationFunctions = activationFunctions;
            this.RecurrentActivationFunctions = recurrentActivationFunctions;
            this.RandomSeed = randomSeed;
            this.RecurrentInputCountRange = recurrentInputCountRange;
            this.EngineConfig = engineConfig;
        }
        
        /// <summary>
        /// Gets or Sets Dropout
        /// </summary>
        [DataMember(Name="dropout", EmitDefaultValue=false)]
        public Range Dropout { get; set; }

        /// <summary>
        /// Gets or Sets BatchSize
        /// </summary>
        [DataMember(Name="batchSize", EmitDefaultValue=false)]
        public int? BatchSize { get; set; }

        /// <summary>
        /// Gets or Sets RecurrentDropout
        /// </summary>
        [DataMember(Name="recurrentDropout", EmitDefaultValue=false)]
        public Range RecurrentDropout { get; set; }

        /// <summary>
        /// Gets or Sets RecurrentOutputCount
        /// </summary>
        [DataMember(Name="recurrentOutputCount", EmitDefaultValue=false)]
        public int? RecurrentOutputCount { get; set; }

        /// <summary>
        /// Data set id on which to train network
        /// </summary>
        /// <value>Data set id on which to train network</value>
        [DataMember(Name="datasetId", EmitDefaultValue=false)]
        public string DatasetId { get; set; }

        /// <summary>
        /// Define min and max value for each output column(feature), and is input optional
        /// </summary>
        /// <value>Define min and max value for each output column(feature), and is input optional</value>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public List<InputConfig> Inputs { get; set; }

        /// <summary>
        /// Define min and max value for each output column(feature)
        /// </summary>
        /// <value>Define min and max value for each output column(feature)</value>
        [DataMember(Name="outputRanges", EmitDefaultValue=false)]
        public List<Range> OutputRanges { get; set; }

        /// <summary>
        /// Range in which to search number of hidden layers
        /// </summary>
        /// <value>Range in which to search number of hidden layers</value>
        [DataMember(Name="hiddenLayerCountRange", EmitDefaultValue=false)]
        public Range HiddenLayerCountRange { get; set; }

        /// <summary>
        /// Range in which to search number of neurons per layer
        /// </summary>
        /// <value>Range in which to search number of neurons per layer</value>
        [DataMember(Name="neuronsPerLayer", EmitDefaultValue=false)]
        public Range NeuronsPerLayer { get; set; }




        /// <summary>
        /// Maximum number of epoch
        /// </summary>
        /// <value>Maximum number of epoch</value>
        [DataMember(Name="maxEpoch", EmitDefaultValue=false)]
        public int? MaxEpoch { get; set; }

        /// <summary>
        /// Portion of data set to use for validation, must be between 0 and 1.
        /// </summary>
        /// <value>Portion of data set to use for validation, must be between 0 and 1.</value>
        [DataMember(Name="validationSplit", EmitDefaultValue=false)]
        public double? ValidationSplit { get; set; }

        /// <summary>
        /// Random number generator seed, if the value is zero, the rows will not be randomly shuffled
        /// </summary>
        /// <value>Random number generator seed, if the value is zero, the rows will not be randomly shuffled</value>
        [DataMember(Name="randomSeed", EmitDefaultValue=false)]
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Range in which to search number of recurrent inputs
        /// </summary>
        /// <value>Range in which to search number of recurrent inputs</value>
        [DataMember(Name="recurrentInputCountRange", EmitDefaultValue=false)]
        public Range RecurrentInputCountRange { get; set; }

        /// <summary>
        /// Optimization engine config
        /// </summary>
        /// <value>Optimization engine config</value>
        [DataMember(Name="engineConfig", EmitDefaultValue=false)]
        public RecurrentOptimizationEngineConfig EngineConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KerasRecurrentOptimizationConfig {\n");
            sb.Append("  Dropout: ").Append(Dropout).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  RecurrentDropout: ").Append(RecurrentDropout).Append("\n");
            sb.Append("  RecurrentOutputCount: ").Append(RecurrentOutputCount).Append("\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  OutputRanges: ").Append(OutputRanges).Append("\n");
            sb.Append("  HiddenLayerCountRange: ").Append(HiddenLayerCountRange).Append("\n");
            sb.Append("  NeuronsPerLayer: ").Append(NeuronsPerLayer).Append("\n");
            sb.Append("  TrainingAlgorithms: ").Append(TrainingAlgorithms).Append("\n");
            sb.Append("  ActivationFunctions: ").Append(ActivationFunctions).Append("\n");
            sb.Append("  RecurrentActivationFunctions: ").Append(RecurrentActivationFunctions).Append("\n");
            sb.Append("  MaxEpoch: ").Append(MaxEpoch).Append("\n");
            sb.Append("  ValidationSplit: ").Append(ValidationSplit).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("  RecurrentInputCountRange: ").Append(RecurrentInputCountRange).Append("\n");
            sb.Append("  EngineConfig: ").Append(EngineConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerasRecurrentOptimizationConfig);
        }

        /// <summary>
        /// Returns true if KerasRecurrentOptimizationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of KerasRecurrentOptimizationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerasRecurrentOptimizationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dropout == input.Dropout ||
                    (this.Dropout != null &&
                    this.Dropout.Equals(input.Dropout))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                ) && 
                (
                    this.RecurrentDropout == input.RecurrentDropout ||
                    (this.RecurrentDropout != null &&
                    this.RecurrentDropout.Equals(input.RecurrentDropout))
                ) && 
                (
                    this.RecurrentOutputCount == input.RecurrentOutputCount ||
                    (this.RecurrentOutputCount != null &&
                    this.RecurrentOutputCount.Equals(input.RecurrentOutputCount))
                ) && 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.OutputRanges == input.OutputRanges ||
                    this.OutputRanges != null &&
                    this.OutputRanges.SequenceEqual(input.OutputRanges)
                ) && 
                (
                    this.HiddenLayerCountRange == input.HiddenLayerCountRange ||
                    (this.HiddenLayerCountRange != null &&
                    this.HiddenLayerCountRange.Equals(input.HiddenLayerCountRange))
                ) && 
                (
                    this.NeuronsPerLayer == input.NeuronsPerLayer ||
                    (this.NeuronsPerLayer != null &&
                    this.NeuronsPerLayer.Equals(input.NeuronsPerLayer))
                ) && 
                (
                    this.TrainingAlgorithms == input.TrainingAlgorithms ||
                    this.TrainingAlgorithms != null &&
                    this.TrainingAlgorithms.SequenceEqual(input.TrainingAlgorithms)
                ) && 
                (
                    this.ActivationFunctions == input.ActivationFunctions ||
                    this.ActivationFunctions != null &&
                    this.ActivationFunctions.SequenceEqual(input.ActivationFunctions)
                ) && 
                (
                    this.RecurrentActivationFunctions == input.RecurrentActivationFunctions ||
                    this.RecurrentActivationFunctions != null &&
                    this.RecurrentActivationFunctions.SequenceEqual(input.RecurrentActivationFunctions)
                ) && 
                (
                    this.MaxEpoch == input.MaxEpoch ||
                    (this.MaxEpoch != null &&
                    this.MaxEpoch.Equals(input.MaxEpoch))
                ) && 
                (
                    this.ValidationSplit == input.ValidationSplit ||
                    (this.ValidationSplit != null &&
                    this.ValidationSplit.Equals(input.ValidationSplit))
                ) && 
                (
                    this.RandomSeed == input.RandomSeed ||
                    (this.RandomSeed != null &&
                    this.RandomSeed.Equals(input.RandomSeed))
                ) && 
                (
                    this.RecurrentInputCountRange == input.RecurrentInputCountRange ||
                    (this.RecurrentInputCountRange != null &&
                    this.RecurrentInputCountRange.Equals(input.RecurrentInputCountRange))
                ) && 
                (
                    this.EngineConfig == input.EngineConfig ||
                    (this.EngineConfig != null &&
                    this.EngineConfig.Equals(input.EngineConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dropout != null)
                    hashCode = hashCode * 59 + this.Dropout.GetHashCode();
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                if (this.RecurrentDropout != null)
                    hashCode = hashCode * 59 + this.RecurrentDropout.GetHashCode();
                if (this.RecurrentOutputCount != null)
                    hashCode = hashCode * 59 + this.RecurrentOutputCount.GetHashCode();
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.OutputRanges != null)
                    hashCode = hashCode * 59 + this.OutputRanges.GetHashCode();
                if (this.HiddenLayerCountRange != null)
                    hashCode = hashCode * 59 + this.HiddenLayerCountRange.GetHashCode();
                if (this.NeuronsPerLayer != null)
                    hashCode = hashCode * 59 + this.NeuronsPerLayer.GetHashCode();
                if (this.TrainingAlgorithms != null)
                    hashCode = hashCode * 59 + this.TrainingAlgorithms.GetHashCode();
                if (this.ActivationFunctions != null)
                    hashCode = hashCode * 59 + this.ActivationFunctions.GetHashCode();
                if (this.RecurrentActivationFunctions != null)
                    hashCode = hashCode * 59 + this.RecurrentActivationFunctions.GetHashCode();
                if (this.MaxEpoch != null)
                    hashCode = hashCode * 59 + this.MaxEpoch.GetHashCode();
                if (this.ValidationSplit != null)
                    hashCode = hashCode * 59 + this.ValidationSplit.GetHashCode();
                if (this.RandomSeed != null)
                    hashCode = hashCode * 59 + this.RandomSeed.GetHashCode();
                if (this.RecurrentInputCountRange != null)
                    hashCode = hashCode * 59 + this.RecurrentInputCountRange.GetHashCode();
                if (this.EngineConfig != null)
                    hashCode = hashCode * 59 + this.EngineConfig.GetHashCode();
                return hashCode;
            }
        }
    }

}
