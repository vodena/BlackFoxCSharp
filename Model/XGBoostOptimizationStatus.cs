/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = BlackFoxCSharp.Client.OpenAPIDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// &lt;inheritdoc /&gt;
    /// </summary>
    [DataContract]
    public partial class XGBoostOptimizationStatus :  IEquatable<XGBoostOptimizationStatus>
    {
        /// <summary>
        /// Optimization state (Active, Finished, Stopped, Error)
        /// </summary>
        /// <value>Optimization state (Active, Finished, Stopped, Error)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public OptimizationState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="XGBoostOptimizationStatus" /> class.
        /// </summary>
        /// <param name="guid">Guid.</param>
        /// <param name="state">Optimization state (Active, Finished, Stopped, Error).</param>
        /// <param name="generation">Current generation.</param>
        /// <param name="totalGenerations">Total number of generations.</param>
        /// <param name="validationSetError">Error on validation set.</param>
        /// <param name="trainingSetError">Error on training set.</param>
        /// <param name="bestModel">Best model, only set if optimization is finished.</param>
        /// <param name="startDateTime">Optimization start date and time.</param>
        /// <param name="estimatedDateTime">Optimization estimated finish date and time.</param>
        /// <param name="generationSeconds">How many seconds has this generation worked.</param>
        /// <param name="metricName">Metric name.</param>
        public XGBoostOptimizationStatus(Guid guid = default(Guid), OptimizationState? state = default(OptimizationState?), int generation = default(int), int totalGenerations = default(int), double validationSetError = default(double), double trainingSetError = default(double), XGBoostModel bestModel = default(XGBoostModel), DateTime startDateTime = default(DateTime), DateTime estimatedDateTime = default(DateTime), long generationSeconds = default(long), string metricName = default(string))
        {
            this.BestModel = bestModel;
            this.MetricName = metricName;
            this.Guid = guid;
            this.State = state;
            this.Generation = generation;
            this.TotalGenerations = totalGenerations;
            this.ValidationSetError = validationSetError;
            this.TrainingSetError = trainingSetError;
            this.BestModel = bestModel;
            this.StartDateTime = startDateTime;
            this.EstimatedDateTime = estimatedDateTime;
            this.GenerationSeconds = generationSeconds;
            this.MetricName = metricName;
        }

        public XGBoostOptimizationStatus() { }

        /// <summary>
        /// Guid
        /// </summary>
        /// <value>Guid</value>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public Guid Guid { get; set; }


        /// <summary>
        /// Current generation
        /// </summary>
        /// <value>Current generation</value>
        [DataMember(Name="generation", EmitDefaultValue=false)]
        public int Generation { get; set; }

        /// <summary>
        /// Total number of generations
        /// </summary>
        /// <value>Total number of generations</value>
        [DataMember(Name="totalGenerations", EmitDefaultValue=false)]
        public int TotalGenerations { get; set; }

        /// <summary>
        /// Error on validation set
        /// </summary>
        /// <value>Error on validation set</value>
        [DataMember(Name="validationSetError", EmitDefaultValue=false)]
        public double ValidationSetError { get; set; }

        /// <summary>
        /// Error on training set
        /// </summary>
        /// <value>Error on training set</value>
        [DataMember(Name="trainingSetError", EmitDefaultValue=false)]
        public double TrainingSetError { get; set; }

        /// <summary>
        /// Best model, only set if optimization is finished
        /// </summary>
        /// <value>Best model, only set if optimization is finished</value>
        [DataMember(Name="bestModel", EmitDefaultValue=true)]
        public XGBoostModel BestModel { get; set; }

        /// <summary>
        /// Optimization start date and time
        /// </summary>
        /// <value>Optimization start date and time</value>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Optimization estimated finish date and time
        /// </summary>
        /// <value>Optimization estimated finish date and time</value>
        [DataMember(Name="estimatedDateTime", EmitDefaultValue=false)]
        public DateTime EstimatedDateTime { get; set; }

        /// <summary>
        /// How many seconds has this generation worked
        /// </summary>
        /// <value>How many seconds has this generation worked</value>
        [DataMember(Name="generationSeconds", EmitDefaultValue=false)]
        public long GenerationSeconds { get; set; }

        /// <summary>
        /// Metric name
        /// </summary>
        /// <value>Metric name</value>
        [DataMember(Name="metricName", EmitDefaultValue=true)]
        public string MetricName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XGBoostOptimizationStatus {\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  TotalGenerations: ").Append(TotalGenerations).Append("\n");
            sb.Append("  ValidationSetError: ").Append(ValidationSetError).Append("\n");
            sb.Append("  TrainingSetError: ").Append(TrainingSetError).Append("\n");
            sb.Append("  BestModel: ").Append(BestModel).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EstimatedDateTime: ").Append(EstimatedDateTime).Append("\n");
            sb.Append("  GenerationSeconds: ").Append(GenerationSeconds).Append("\n");
            sb.Append("  MetricName: ").Append(MetricName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XGBoostOptimizationStatus);
        }

        /// <summary>
        /// Returns true if XGBoostOptimizationStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of XGBoostOptimizationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XGBoostOptimizationStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Generation == input.Generation ||
                    (this.Generation != null &&
                    this.Generation.Equals(input.Generation))
                ) && 
                (
                    this.TotalGenerations == input.TotalGenerations ||
                    (this.TotalGenerations != null &&
                    this.TotalGenerations.Equals(input.TotalGenerations))
                ) && 
                (
                    this.ValidationSetError == input.ValidationSetError ||
                    (this.ValidationSetError != null &&
                    this.ValidationSetError.Equals(input.ValidationSetError))
                ) && 
                (
                    this.TrainingSetError == input.TrainingSetError ||
                    (this.TrainingSetError != null &&
                    this.TrainingSetError.Equals(input.TrainingSetError))
                ) && 
                (
                    this.BestModel == input.BestModel ||
                    (this.BestModel != null &&
                    this.BestModel.Equals(input.BestModel))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EstimatedDateTime == input.EstimatedDateTime ||
                    (this.EstimatedDateTime != null &&
                    this.EstimatedDateTime.Equals(input.EstimatedDateTime))
                ) && 
                (
                    this.GenerationSeconds == input.GenerationSeconds ||
                    (this.GenerationSeconds != null &&
                    this.GenerationSeconds.Equals(input.GenerationSeconds))
                ) && 
                (
                    this.MetricName == input.MetricName ||
                    (this.MetricName != null &&
                    this.MetricName.Equals(input.MetricName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Generation != null)
                    hashCode = hashCode * 59 + this.Generation.GetHashCode();
                if (this.TotalGenerations != null)
                    hashCode = hashCode * 59 + this.TotalGenerations.GetHashCode();
                if (this.ValidationSetError != null)
                    hashCode = hashCode * 59 + this.ValidationSetError.GetHashCode();
                if (this.TrainingSetError != null)
                    hashCode = hashCode * 59 + this.TrainingSetError.GetHashCode();
                if (this.BestModel != null)
                    hashCode = hashCode * 59 + this.BestModel.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EstimatedDateTime != null)
                    hashCode = hashCode * 59 + this.EstimatedDateTime.GetHashCode();
                if (this.GenerationSeconds != null)
                    hashCode = hashCode * 59 + this.GenerationSeconds.GetHashCode();
                if (this.MetricName != null)
                    hashCode = hashCode * 59 + this.MetricName.GetHashCode();
                return hashCode;
            }
        }
    }

}
