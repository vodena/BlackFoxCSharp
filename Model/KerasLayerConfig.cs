/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// KerasLayerConfig
    /// </summary>
    [DataContract]
    public partial class KerasLayerConfig :  IEquatable<KerasLayerConfig>
    {
        /// <summary>
        /// Defines ActivationFunction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivationFunctionEnum
        {
            
            /// <summary>
            /// Enum SoftMax for value: SoftMax
            /// </summary>
            [EnumMember(Value = "SoftMax")]
            SoftMax = 1,
            
            /// <summary>
            /// Enum Elu for value: Elu
            /// </summary>
            [EnumMember(Value = "Elu")]
            Elu = 2,
            
            /// <summary>
            /// Enum Selu for value: Selu
            /// </summary>
            [EnumMember(Value = "Selu")]
            Selu = 3,
            
            /// <summary>
            /// Enum SoftPlus for value: SoftPlus
            /// </summary>
            [EnumMember(Value = "SoftPlus")]
            SoftPlus = 4,
            
            /// <summary>
            /// Enum SoftSign for value: SoftSign
            /// </summary>
            [EnumMember(Value = "SoftSign")]
            SoftSign = 5,
            
            /// <summary>
            /// Enum ReLu for value: ReLu
            /// </summary>
            [EnumMember(Value = "ReLu")]
            ReLu = 6,
            
            /// <summary>
            /// Enum TanH for value: TanH
            /// </summary>
            [EnumMember(Value = "TanH")]
            TanH = 7,
            
            /// <summary>
            /// Enum Sigmoid for value: Sigmoid
            /// </summary>
            [EnumMember(Value = "Sigmoid")]
            Sigmoid = 8,
            
            /// <summary>
            /// Enum HardSigmoid for value: HardSigmoid
            /// </summary>
            [EnumMember(Value = "HardSigmoid")]
            HardSigmoid = 9,
            
            /// <summary>
            /// Enum Linear for value: Linear
            /// </summary>
            [EnumMember(Value = "Linear")]
            Linear = 10
        }

        /// <summary>
        /// Gets or Sets ActivationFunction
        /// </summary>
        [DataMember(Name="activationFunction", EmitDefaultValue=false)]
        public ActivationFunctionEnum? ActivationFunction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasLayerConfig" /> class.
        /// </summary>
        /// <param name="activationFunction">activationFunction.</param>
        /// <param name="ranges">ranges.</param>
        public KerasLayerConfig(ActivationFunctionEnum? activationFunction = default(ActivationFunctionEnum?), List<Range> ranges = default(List<Range>))
        {
            this.ActivationFunction = activationFunction;
            this.Ranges = ranges;
        }
        

        /// <summary>
        /// Gets or Sets Ranges
        /// </summary>
        [DataMember(Name="ranges", EmitDefaultValue=false)]
        public List<Range> Ranges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KerasLayerConfig {\n");
            sb.Append("  ActivationFunction: ").Append(ActivationFunction).Append("\n");
            sb.Append("  Ranges: ").Append(Ranges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerasLayerConfig);
        }

        /// <summary>
        /// Returns true if KerasLayerConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of KerasLayerConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerasLayerConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivationFunction == input.ActivationFunction ||
                    (this.ActivationFunction != null &&
                    this.ActivationFunction.Equals(input.ActivationFunction))
                ) && 
                (
                    this.Ranges == input.Ranges ||
                    this.Ranges != null &&
                    this.Ranges.SequenceEqual(input.Ranges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivationFunction != null)
                    hashCode = hashCode * 59 + this.ActivationFunction.GetHashCode();
                if (this.Ranges != null)
                    hashCode = hashCode * 59 + this.Ranges.GetHashCode();
                return hashCode;
            }
        }
    }

}
