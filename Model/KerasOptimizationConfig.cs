/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// KerasOptimizationConfig
    /// </summary>
    [DataContract]
    public partial class KerasOptimizationConfig :  IEquatable<KerasOptimizationConfig>
    {
        /// <summary>
        /// Defines ProblemType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProblemTypeEnum
        {
            
            /// <summary>
            /// Enum Regression for value: Regression
            /// </summary>
            [EnumMember(Value = "Regression")]
            Regression = 1,
            
            /// <summary>
            /// Enum BinaryClassification for value: BinaryClassification
            /// </summary>
            [EnumMember(Value = "BinaryClassification")]
            BinaryClassification = 2,
            
            /// <summary>
            /// Enum MultiClassClassification for value: MultiClassClassification
            /// </summary>
            [EnumMember(Value = "MultiClassClassification")]
            MultiClassClassification = 3
        }

        /// <summary>
        /// Gets or Sets ProblemType
        /// </summary>
        [DataMember(Name="problemType", EmitDefaultValue=false)]
        public ProblemTypeEnum? ProblemType { get; set; }
        /// <summary>
        /// Defines TrainingAlgorithms
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrainingAlgorithmsEnum
        {
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 1,
            
            /// <summary>
            /// Enum RMSprop for value: RMSprop
            /// </summary>
            [EnumMember(Value = "RMSprop")]
            RMSprop = 2,
            
            /// <summary>
            /// Enum Adagrad for value: Adagrad
            /// </summary>
            [EnumMember(Value = "Adagrad")]
            Adagrad = 3,
            
            /// <summary>
            /// Enum Adadelta for value: Adadelta
            /// </summary>
            [EnumMember(Value = "Adadelta")]
            Adadelta = 4,
            
            /// <summary>
            /// Enum Adam for value: Adam
            /// </summary>
            [EnumMember(Value = "Adam")]
            Adam = 5,
            
            /// <summary>
            /// Enum Adamax for value: Adamax
            /// </summary>
            [EnumMember(Value = "Adamax")]
            Adamax = 6,
            
            /// <summary>
            /// Enum Nadam for value: Nadam
            /// </summary>
            [EnumMember(Value = "Nadam")]
            Nadam = 7
        }


        /// <summary>
        /// Gets or Sets TrainingAlgorithms
        /// </summary>
        [DataMember(Name="trainingAlgorithms", EmitDefaultValue=false)]
        public List<TrainingAlgorithmsEnum> TrainingAlgorithms { get; set; }
        /// <summary>
        /// Defines ActivationFunctions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivationFunctionsEnum
        {
            
            /// <summary>
            /// Enum SoftMax for value: SoftMax
            /// </summary>
            [EnumMember(Value = "SoftMax")]
            SoftMax = 1,
            
            /// <summary>
            /// Enum Elu for value: Elu
            /// </summary>
            [EnumMember(Value = "Elu")]
            Elu = 2,
            
            /// <summary>
            /// Enum Selu for value: Selu
            /// </summary>
            [EnumMember(Value = "Selu")]
            Selu = 3,
            
            /// <summary>
            /// Enum SoftPlus for value: SoftPlus
            /// </summary>
            [EnumMember(Value = "SoftPlus")]
            SoftPlus = 4,
            
            /// <summary>
            /// Enum SoftSign for value: SoftSign
            /// </summary>
            [EnumMember(Value = "SoftSign")]
            SoftSign = 5,
            
            /// <summary>
            /// Enum ReLu for value: ReLu
            /// </summary>
            [EnumMember(Value = "ReLu")]
            ReLu = 6,
            
            /// <summary>
            /// Enum TanH for value: TanH
            /// </summary>
            [EnumMember(Value = "TanH")]
            TanH = 7,
            
            /// <summary>
            /// Enum Sigmoid for value: Sigmoid
            /// </summary>
            [EnumMember(Value = "Sigmoid")]
            Sigmoid = 8,
            
            /// <summary>
            /// Enum HardSigmoid for value: HardSigmoid
            /// </summary>
            [EnumMember(Value = "HardSigmoid")]
            HardSigmoid = 9,
            
            /// <summary>
            /// Enum Linear for value: Linear
            /// </summary>
            [EnumMember(Value = "Linear")]
            Linear = 10
        }


        /// <summary>
        /// Gets or Sets ActivationFunctions
        /// </summary>
        [DataMember(Name="activationFunctions", EmitDefaultValue=false)]
        public List<ActivationFunctionsEnum> ActivationFunctions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasOptimizationConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KerasOptimizationConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasOptimizationConfig" /> class.
        /// </summary>
        /// <param name="dropout">dropout.</param>
        /// <param name="batchSize">batchSize.</param>
        /// <param name="datasetId">datasetId.</param>
        /// <param name="inputRanges">inputRanges.</param>
        /// <param name="outputRanges">outputRanges.</param>
        /// <param name="problemType">problemType.</param>
        /// <param name="hiddenLayerCountRange">hiddenLayerCountRange.</param>
        /// <param name="neuronsPerLayer">neuronsPerLayer.</param>
        /// <param name="trainingAlgorithms">trainingAlgorithms.</param>
        /// <param name="activationFunctions">activationFunctions.</param>
        /// <param name="maxEpoch">maxEpoch (required).</param>
        /// <param name="crossValidation">crossValidation.</param>
        /// <param name="validationSplit">validationSplit (required).</param>
        /// <param name="randomSeed">randomSeed.</param>
        /// <param name="engineConfig">engineConfig.</param>
        public KerasOptimizationConfig(Range dropout = default(Range), int? batchSize = default(int?), string datasetId = default(string), List<Range> inputRanges = default(List<Range>), List<Range> outputRanges = default(List<Range>), ProblemTypeEnum? problemType = default(ProblemTypeEnum?), Range hiddenLayerCountRange = default(Range), Range neuronsPerLayer = default(Range), List<TrainingAlgorithmsEnum> trainingAlgorithms = default(List<TrainingAlgorithmsEnum>), List<ActivationFunctionsEnum> activationFunctions = default(List<ActivationFunctionsEnum>), int? maxEpoch = default(int?), bool? crossValidation = default(bool?), double? validationSplit = default(double?), int? randomSeed = default(int?), OptimizationEngineConfig engineConfig = default(OptimizationEngineConfig))
        {
            // to ensure "maxEpoch" is required (not null)
            if (maxEpoch == null)
            {
                throw new InvalidDataException("maxEpoch is a required property for KerasOptimizationConfig and cannot be null");
            }
            else
            {
                this.MaxEpoch = maxEpoch;
            }
            // to ensure "validationSplit" is required (not null)
            if (validationSplit == null)
            {
                throw new InvalidDataException("validationSplit is a required property for KerasOptimizationConfig and cannot be null");
            }
            else
            {
                this.ValidationSplit = validationSplit;
            }
            this.Dropout = dropout;
            this.BatchSize = batchSize;
            this.DatasetId = datasetId;
            this.InputRanges = inputRanges;
            this.OutputRanges = outputRanges;
            this.ProblemType = problemType;
            this.HiddenLayerCountRange = hiddenLayerCountRange;
            this.NeuronsPerLayer = neuronsPerLayer;
            this.TrainingAlgorithms = trainingAlgorithms;
            this.ActivationFunctions = activationFunctions;
            this.CrossValidation = crossValidation;
            this.RandomSeed = randomSeed;
            this.EngineConfig = engineConfig;
        }
        
        /// <summary>
        /// Gets or Sets Dropout
        /// </summary>
        [DataMember(Name="dropout", EmitDefaultValue=false)]
        public Range Dropout { get; set; }

        /// <summary>
        /// Gets or Sets BatchSize
        /// </summary>
        [DataMember(Name="batchSize", EmitDefaultValue=false)]
        public int? BatchSize { get; set; }

        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name="datasetId", EmitDefaultValue=false)]
        public string DatasetId { get; set; }

        /// <summary>
        /// Gets or Sets InputRanges
        /// </summary>
        [DataMember(Name="inputRanges", EmitDefaultValue=false)]
        public List<Range> InputRanges { get; set; }

        /// <summary>
        /// Gets or Sets OutputRanges
        /// </summary>
        [DataMember(Name="outputRanges", EmitDefaultValue=false)]
        public List<Range> OutputRanges { get; set; }


        /// <summary>
        /// Gets or Sets HiddenLayerCountRange
        /// </summary>
        [DataMember(Name="hiddenLayerCountRange", EmitDefaultValue=false)]
        public Range HiddenLayerCountRange { get; set; }

        /// <summary>
        /// Gets or Sets NeuronsPerLayer
        /// </summary>
        [DataMember(Name="neuronsPerLayer", EmitDefaultValue=false)]
        public Range NeuronsPerLayer { get; set; }



        /// <summary>
        /// Gets or Sets MaxEpoch
        /// </summary>
        [DataMember(Name="maxEpoch", EmitDefaultValue=false)]
        public int? MaxEpoch { get; set; }

        /// <summary>
        /// Gets or Sets CrossValidation
        /// </summary>
        [DataMember(Name="crossValidation", EmitDefaultValue=false)]
        public bool? CrossValidation { get; set; }

        /// <summary>
        /// Gets or Sets ValidationSplit
        /// </summary>
        [DataMember(Name="validationSplit", EmitDefaultValue=false)]
        public double? ValidationSplit { get; set; }

        /// <summary>
        /// Gets or Sets RandomSeed
        /// </summary>
        [DataMember(Name="randomSeed", EmitDefaultValue=false)]
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Gets or Sets EngineConfig
        /// </summary>
        [DataMember(Name="engineConfig", EmitDefaultValue=false)]
        public OptimizationEngineConfig EngineConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KerasOptimizationConfig {\n");
            sb.Append("  Dropout: ").Append(Dropout).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  InputRanges: ").Append(InputRanges).Append("\n");
            sb.Append("  OutputRanges: ").Append(OutputRanges).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  HiddenLayerCountRange: ").Append(HiddenLayerCountRange).Append("\n");
            sb.Append("  NeuronsPerLayer: ").Append(NeuronsPerLayer).Append("\n");
            sb.Append("  TrainingAlgorithms: ").Append(TrainingAlgorithms).Append("\n");
            sb.Append("  ActivationFunctions: ").Append(ActivationFunctions).Append("\n");
            sb.Append("  MaxEpoch: ").Append(MaxEpoch).Append("\n");
            sb.Append("  CrossValidation: ").Append(CrossValidation).Append("\n");
            sb.Append("  ValidationSplit: ").Append(ValidationSplit).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("  EngineConfig: ").Append(EngineConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerasOptimizationConfig);
        }

        /// <summary>
        /// Returns true if KerasOptimizationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of KerasOptimizationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerasOptimizationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dropout == input.Dropout ||
                    (this.Dropout != null &&
                    this.Dropout.Equals(input.Dropout))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                ) && 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                ) && 
                (
                    this.InputRanges == input.InputRanges ||
                    this.InputRanges != null &&
                    this.InputRanges.SequenceEqual(input.InputRanges)
                ) && 
                (
                    this.OutputRanges == input.OutputRanges ||
                    this.OutputRanges != null &&
                    this.OutputRanges.SequenceEqual(input.OutputRanges)
                ) && 
                (
                    this.ProblemType == input.ProblemType ||
                    (this.ProblemType != null &&
                    this.ProblemType.Equals(input.ProblemType))
                ) && 
                (
                    this.HiddenLayerCountRange == input.HiddenLayerCountRange ||
                    (this.HiddenLayerCountRange != null &&
                    this.HiddenLayerCountRange.Equals(input.HiddenLayerCountRange))
                ) && 
                (
                    this.NeuronsPerLayer == input.NeuronsPerLayer ||
                    (this.NeuronsPerLayer != null &&
                    this.NeuronsPerLayer.Equals(input.NeuronsPerLayer))
                ) && 
                (
                    this.TrainingAlgorithms == input.TrainingAlgorithms ||
                    this.TrainingAlgorithms != null &&
                    this.TrainingAlgorithms.SequenceEqual(input.TrainingAlgorithms)
                ) && 
                (
                    this.ActivationFunctions == input.ActivationFunctions ||
                    this.ActivationFunctions != null &&
                    this.ActivationFunctions.SequenceEqual(input.ActivationFunctions)
                ) && 
                (
                    this.MaxEpoch == input.MaxEpoch ||
                    (this.MaxEpoch != null &&
                    this.MaxEpoch.Equals(input.MaxEpoch))
                ) && 
                (
                    this.CrossValidation == input.CrossValidation ||
                    (this.CrossValidation != null &&
                    this.CrossValidation.Equals(input.CrossValidation))
                ) && 
                (
                    this.ValidationSplit == input.ValidationSplit ||
                    (this.ValidationSplit != null &&
                    this.ValidationSplit.Equals(input.ValidationSplit))
                ) && 
                (
                    this.RandomSeed == input.RandomSeed ||
                    (this.RandomSeed != null &&
                    this.RandomSeed.Equals(input.RandomSeed))
                ) && 
                (
                    this.EngineConfig == input.EngineConfig ||
                    (this.EngineConfig != null &&
                    this.EngineConfig.Equals(input.EngineConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dropout != null)
                    hashCode = hashCode * 59 + this.Dropout.GetHashCode();
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                if (this.InputRanges != null)
                    hashCode = hashCode * 59 + this.InputRanges.GetHashCode();
                if (this.OutputRanges != null)
                    hashCode = hashCode * 59 + this.OutputRanges.GetHashCode();
                if (this.ProblemType != null)
                    hashCode = hashCode * 59 + this.ProblemType.GetHashCode();
                if (this.HiddenLayerCountRange != null)
                    hashCode = hashCode * 59 + this.HiddenLayerCountRange.GetHashCode();
                if (this.NeuronsPerLayer != null)
                    hashCode = hashCode * 59 + this.NeuronsPerLayer.GetHashCode();
                if (this.TrainingAlgorithms != null)
                    hashCode = hashCode * 59 + this.TrainingAlgorithms.GetHashCode();
                if (this.ActivationFunctions != null)
                    hashCode = hashCode * 59 + this.ActivationFunctions.GetHashCode();
                if (this.MaxEpoch != null)
                    hashCode = hashCode * 59 + this.MaxEpoch.GetHashCode();
                if (this.CrossValidation != null)
                    hashCode = hashCode * 59 + this.CrossValidation.GetHashCode();
                if (this.ValidationSplit != null)
                    hashCode = hashCode * 59 + this.ValidationSplit.GetHashCode();
                if (this.RandomSeed != null)
                    hashCode = hashCode * 59 + this.RandomSeed.GetHashCode();
                if (this.EngineConfig != null)
                    hashCode = hashCode * 59 + this.EngineConfig.GetHashCode();
                return hashCode;
            }
        }
    }

}
