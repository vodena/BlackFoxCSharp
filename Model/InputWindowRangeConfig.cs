/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// InputWindowRangeConfig
    /// </summary>
    [DataContract]
    public partial class InputWindowRangeConfig :  IEquatable<InputWindowRangeConfig>
    {
        /// <summary>
        /// Defines AggregationTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AggregationTypesEnum
        {
            
            /// <summary>
            /// Enum Avg for value: Avg
            /// </summary>
            [EnumMember(Value = "Avg")]
            Avg = 1,
            
            /// <summary>
            /// Enum Sum for value: Sum
            /// </summary>
            [EnumMember(Value = "Sum")]
            Sum = 2,
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3
        }


        /// <summary>
        /// Gets or Sets AggregationTypes
        /// </summary>
        [DataMember(Name="aggregationTypes", EmitDefaultValue=false)]
        public List<AggregationTypesEnum> AggregationTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputWindowRangeConfig" /> class.
        /// </summary>
        /// <param name="window">window.</param>
        /// <param name="shift">shift.</param>
        /// <param name="step">step.</param>
        /// <param name="aggregationTypes">aggregationTypes.</param>
        public InputWindowRangeConfig(Range window = default(Range), Range shift = default(Range), Range step = default(Range), List<AggregationTypesEnum> aggregationTypes = default(List<AggregationTypesEnum>))
        {
            this.Window = window;
            this.Shift = shift;
            this.Step = step;
            this.AggregationTypes = aggregationTypes;
        }
        
        /// <summary>
        /// Gets or Sets Window
        /// </summary>
        [DataMember(Name="window", EmitDefaultValue=false)]
        public Range Window { get; set; }

        /// <summary>
        /// Gets or Sets Shift
        /// </summary>
        [DataMember(Name="shift", EmitDefaultValue=false)]
        public Range Shift { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public Range Step { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputWindowRangeConfig {\n");
            sb.Append("  Window: ").Append(Window).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  AggregationTypes: ").Append(AggregationTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputWindowRangeConfig);
        }

        /// <summary>
        /// Returns true if InputWindowRangeConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of InputWindowRangeConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputWindowRangeConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Window == input.Window ||
                    (this.Window != null &&
                    this.Window.Equals(input.Window))
                ) && 
                (
                    this.Shift == input.Shift ||
                    (this.Shift != null &&
                    this.Shift.Equals(input.Shift))
                ) && 
                (
                    this.Step == input.Step ||
                    (this.Step != null &&
                    this.Step.Equals(input.Step))
                ) && 
                (
                    this.AggregationTypes == input.AggregationTypes ||
                    this.AggregationTypes != null &&
                    this.AggregationTypes.SequenceEqual(input.AggregationTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Window != null)
                    hashCode = hashCode * 59 + this.Window.GetHashCode();
                if (this.Shift != null)
                    hashCode = hashCode * 59 + this.Shift.GetHashCode();
                if (this.Step != null)
                    hashCode = hashCode * 59 + this.Step.GetHashCode();
                if (this.AggregationTypes != null)
                    hashCode = hashCode * 59 + this.AggregationTypes.GetHashCode();
                return hashCode;
            }
        }
    }

}
