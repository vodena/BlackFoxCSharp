/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = BlackFoxCSharp.Client.OpenAPIDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// Optimization config for XGBoost model
    /// </summary>
    [DataContract]
    public partial class XGBoostOptimizationConfig :  IEquatable<XGBoostOptimizationConfig>
    {
        /// <summary>
        /// Defines the problem type. In case of binary classification,  there must be only one output column.
        /// </summary>
        /// <value>Defines the problem type. In case of binary classification,  there must be only one output column.</value>
        [DataMember(Name="problemType", EmitDefaultValue=false)]
        public ProblemType? ProblemType { get; set; }
        /// <summary>
        /// USED ONLY IN BINARY CLASSIFICATION.  Default metric: ROC_AUC (Area under ROC curve).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize.
        /// </summary>
        /// <value>USED ONLY IN BINARY CLASSIFICATION.  Default metric: ROC_AUC (Area under ROC curve).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize.</value>
        [DataMember(Name="binaryOptimizationMetric", EmitDefaultValue=false)]
        public BinaryMetric? BinaryOptimizationMetric { get; set; }
        /// <summary>
        /// USED ONLY IN REGRESSION.  Default metric: MAE (MEAN ABSOLUTE ERROR).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize.
        /// </summary>
        /// <value>USED ONLY IN REGRESSION.  Default metric: MAE (MEAN ABSOLUTE ERROR).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize.</value>
        [DataMember(Name="regressionOptimizationMetric", EmitDefaultValue=false)]
        public RegressionMetric? RegressionOptimizationMetric { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="XGBoostOptimizationConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XGBoostOptimizationConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XGBoostOptimizationConfig" /> class.
        /// </summary>
        /// <param name="datasetId">datasetId.</param>
        /// <param name="validationSetId">validationSetId.</param>
        /// <param name="customMetricId">customMetricId.</param>
        /// <param name="customMetric">customMetric.</param>
        /// <param name="customMetricMinimization">customMetricMinimization.</param>
        /// <param name="binaryClassificationThreshold">binaryClassificationThreshold.</param>
        /// <param name="customMetricParameters">customMetricParameters.</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="outputs">outputs.</param>
        /// <param name="validationSplit">validationSplit (default to 0.2D).</param>
        /// <param name="randomSeed">randomSeed (default to 300).</param>
        /// <param name="problemType">Defines the problem type. In case of binary classification,  there must be only one output column..</param>
        /// <param name="binaryOptimizationMetric">USED ONLY IN BINARY CLASSIFICATION.  Default metric: ROC_AUC (Area under ROC curve).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize..</param>
        /// <param name="regressionOptimizationMetric">USED ONLY IN REGRESSION.  Default metric: MAE (MEAN ABSOLUTE ERROR).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize..</param>
        /// <param name="nEstimators">N Estimators (required).</param>
        /// <param name="maxDepth">MaxDepth (required).</param>
        /// <param name="minChildWeight">MinChildWeight (required).</param>
        /// <param name="gamma">Gamma (required).</param>
        /// <param name="subsample">Subsample (required).</param>
        /// <param name="colsampleBytree">ColsampleBytree (required).</param>
        /// <param name="regAlpha">RegAlpha (required).</param>
        /// <param name="learningRate">LearningRate (required).</param>
        /// <param name="engineConfig">Optimization engine config.</param>
        public XGBoostOptimizationConfig(string datasetId = default(string), string validationSetId = default(string), string customMetricId = default(string), string customMetric = default(string), bool customMetricMinimization = default(bool), double? binaryClassificationThreshold = default(double?), string customMetricParameters = default(string), List<InputConfig> inputs = default(List<InputConfig>), List<OutputConfig> outputs = default(List<OutputConfig>), double validationSplit = 0.2D, int? randomSeed = 300, ProblemType? problemType = default(ProblemType?), BinaryMetric? binaryOptimizationMetric = default(BinaryMetric?), RegressionMetric? regressionOptimizationMetric = default(RegressionMetric?), RangeInt nEstimators = default(RangeInt), RangeInt maxDepth = default(RangeInt), RangeInt minChildWeight = default(RangeInt), Range gamma = default(Range), Range subsample = default(Range), Range colsampleBytree = default(Range), Range regAlpha = default(Range), Range learningRate = default(Range), OptimizationEngineConfig engineConfig = default(OptimizationEngineConfig))
        {
            this.DatasetId = datasetId;
            this.ValidationSetId = validationSetId;
            this.CustomMetricId = customMetricId;
            this.CustomMetric = customMetric;
            this.BinaryClassificationThreshold = binaryClassificationThreshold;
            this.CustomMetricParameters = customMetricParameters;
            this.Inputs = inputs;
            this.Outputs = outputs;
            this.RandomSeed = randomSeed;
            // to ensure "nEstimators" is required (not null)
            if (nEstimators == null)
            {
                throw new InvalidDataException("nEstimators is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.NEstimators = nEstimators;
            }
            
            // to ensure "maxDepth" is required (not null)
            if (maxDepth == null)
            {
                throw new InvalidDataException("maxDepth is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.MaxDepth = maxDepth;
            }
            
            // to ensure "minChildWeight" is required (not null)
            if (minChildWeight == null)
            {
                throw new InvalidDataException("minChildWeight is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.MinChildWeight = minChildWeight;
            }
            
            // to ensure "gamma" is required (not null)
            if (gamma == null)
            {
                throw new InvalidDataException("gamma is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.Gamma = gamma;
            }
            
            // to ensure "subsample" is required (not null)
            if (subsample == null)
            {
                throw new InvalidDataException("subsample is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.Subsample = subsample;
            }
            
            // to ensure "colsampleBytree" is required (not null)
            if (colsampleBytree == null)
            {
                throw new InvalidDataException("colsampleBytree is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.ColsampleBytree = colsampleBytree;
            }
            
            // to ensure "regAlpha" is required (not null)
            if (regAlpha == null)
            {
                throw new InvalidDataException("regAlpha is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.RegAlpha = regAlpha;
            }
            
            // to ensure "learningRate" is required (not null)
            if (learningRate == null)
            {
                throw new InvalidDataException("learningRate is a required property for XGBoostOptimizationConfig and cannot be null");
            }
            else
            {
                this.LearningRate = learningRate;
            }
            
            this.EngineConfig = engineConfig;
            this.DatasetId = datasetId;
            this.ValidationSetId = validationSetId;
            this.CustomMetricId = customMetricId;
            this.CustomMetric = customMetric;
            this.CustomMetricMinimization = customMetricMinimization;
            this.BinaryClassificationThreshold = binaryClassificationThreshold;
            this.CustomMetricParameters = customMetricParameters;
            this.Inputs = inputs;
            this.Outputs = outputs;
            // use default value if no "validationSplit" provided
            if (validationSplit == null)
            {
                this.ValidationSplit = 0.2D;
            }
            else
            {
                this.ValidationSplit = validationSplit;
            }
            // use default value if no "randomSeed" provided
            if (randomSeed == null)
            {
                this.RandomSeed = 300;
            }
            else
            {
                this.RandomSeed = randomSeed;
            }
            this.ProblemType = problemType;
            this.BinaryOptimizationMetric = binaryOptimizationMetric;
            this.RegressionOptimizationMetric = regressionOptimizationMetric;
            this.EngineConfig = engineConfig;
        }
        
        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name="datasetId", EmitDefaultValue=true)]
        public string DatasetId { get; set; }

        /// <summary>
        /// Gets or Sets ValidationSetId
        /// </summary>
        [DataMember(Name="validationSetId", EmitDefaultValue=true)]
        public string ValidationSetId { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetricId
        /// </summary>
        [DataMember(Name="customMetricId", EmitDefaultValue=true)]
        public string CustomMetricId { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetric
        /// </summary>
        [DataMember(Name="customMetric", EmitDefaultValue=true)]
        public string CustomMetric { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetricMinimization
        /// </summary>
        [DataMember(Name="customMetricMinimization", EmitDefaultValue=false)]
        public bool CustomMetricMinimization { get; set; }

        /// <summary>
        /// Gets or Sets BinaryClassificationThreshold
        /// </summary>
        [DataMember(Name="binaryClassificationThreshold", EmitDefaultValue=true)]
        public double? BinaryClassificationThreshold { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetricParameters
        /// </summary>
        [DataMember(Name="customMetricParameters", EmitDefaultValue=true)]
        public string CustomMetricParameters { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name="inputs", EmitDefaultValue=true)]
        public List<InputConfig> Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name="outputs", EmitDefaultValue=true)]
        public List<OutputConfig> Outputs { get; set; }

        /// <summary>
        /// Gets or Sets ValidationSplit
        /// </summary>
        [DataMember(Name="validationSplit", EmitDefaultValue=false)]
        public double ValidationSplit { get; set; }

        /// <summary>
        /// Gets or Sets RandomSeed
        /// </summary>
        [DataMember(Name="randomSeed", EmitDefaultValue=true)]
        public int? RandomSeed { get; set; }




        /// <summary>
        /// N Estimators
        /// </summary>
        /// <value>N Estimators</value>
        [DataMember(Name="nEstimators", EmitDefaultValue=true)]
        public RangeInt NEstimators { get; set; }

        /// <summary>
        /// MaxDepth
        /// </summary>
        /// <value>MaxDepth</value>
        [DataMember(Name="maxDepth", EmitDefaultValue=true)]
        public RangeInt MaxDepth { get; set; }

        /// <summary>
        /// MinChildWeight
        /// </summary>
        /// <value>MinChildWeight</value>
        [DataMember(Name="minChildWeight", EmitDefaultValue=true)]
        public RangeInt MinChildWeight { get; set; }

        /// <summary>
        /// Gamma
        /// </summary>
        /// <value>Gamma</value>
        [DataMember(Name="gamma", EmitDefaultValue=true)]
        public Range Gamma { get; set; }

        /// <summary>
        /// Subsample
        /// </summary>
        /// <value>Subsample</value>
        [DataMember(Name="subsample", EmitDefaultValue=true)]
        public Range Subsample { get; set; }

        /// <summary>
        /// ColsampleBytree
        /// </summary>
        /// <value>ColsampleBytree</value>
        [DataMember(Name="colsampleBytree", EmitDefaultValue=true)]
        public Range ColsampleBytree { get; set; }

        /// <summary>
        /// RegAlpha
        /// </summary>
        /// <value>RegAlpha</value>
        [DataMember(Name="regAlpha", EmitDefaultValue=true)]
        public Range RegAlpha { get; set; }

        /// <summary>
        /// LearningRate
        /// </summary>
        /// <value>LearningRate</value>
        [DataMember(Name="learningRate", EmitDefaultValue=true)]
        public Range LearningRate { get; set; }

        /// <summary>
        /// Optimization engine config
        /// </summary>
        /// <value>Optimization engine config</value>
        [DataMember(Name="engineConfig", EmitDefaultValue=true)]
        public OptimizationEngineConfig EngineConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XGBoostOptimizationConfig {\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  ValidationSetId: ").Append(ValidationSetId).Append("\n");
            sb.Append("  CustomMetricId: ").Append(CustomMetricId).Append("\n");
            sb.Append("  CustomMetric: ").Append(CustomMetric).Append("\n");
            sb.Append("  CustomMetricMinimization: ").Append(CustomMetricMinimization).Append("\n");
            sb.Append("  BinaryClassificationThreshold: ").Append(BinaryClassificationThreshold).Append("\n");
            sb.Append("  CustomMetricParameters: ").Append(CustomMetricParameters).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  ValidationSplit: ").Append(ValidationSplit).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  BinaryOptimizationMetric: ").Append(BinaryOptimizationMetric).Append("\n");
            sb.Append("  RegressionOptimizationMetric: ").Append(RegressionOptimizationMetric).Append("\n");
            sb.Append("  NEstimators: ").Append(NEstimators).Append("\n");
            sb.Append("  MaxDepth: ").Append(MaxDepth).Append("\n");
            sb.Append("  MinChildWeight: ").Append(MinChildWeight).Append("\n");
            sb.Append("  Gamma: ").Append(Gamma).Append("\n");
            sb.Append("  Subsample: ").Append(Subsample).Append("\n");
            sb.Append("  ColsampleBytree: ").Append(ColsampleBytree).Append("\n");
            sb.Append("  RegAlpha: ").Append(RegAlpha).Append("\n");
            sb.Append("  LearningRate: ").Append(LearningRate).Append("\n");
            sb.Append("  EngineConfig: ").Append(EngineConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XGBoostOptimizationConfig);
        }

        /// <summary>
        /// Returns true if XGBoostOptimizationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of XGBoostOptimizationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XGBoostOptimizationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                ) && 
                (
                    this.ValidationSetId == input.ValidationSetId ||
                    (this.ValidationSetId != null &&
                    this.ValidationSetId.Equals(input.ValidationSetId))
                ) && 
                (
                    this.CustomMetricId == input.CustomMetricId ||
                    (this.CustomMetricId != null &&
                    this.CustomMetricId.Equals(input.CustomMetricId))
                ) && 
                (
                    this.CustomMetric == input.CustomMetric ||
                    (this.CustomMetric != null &&
                    this.CustomMetric.Equals(input.CustomMetric))
                ) && 
                (
                    this.CustomMetricMinimization == input.CustomMetricMinimization ||
                    (this.CustomMetricMinimization != null &&
                    this.CustomMetricMinimization.Equals(input.CustomMetricMinimization))
                ) && 
                (
                    this.BinaryClassificationThreshold == input.BinaryClassificationThreshold ||
                    (this.BinaryClassificationThreshold != null &&
                    this.BinaryClassificationThreshold.Equals(input.BinaryClassificationThreshold))
                ) && 
                (
                    this.CustomMetricParameters == input.CustomMetricParameters ||
                    (this.CustomMetricParameters != null &&
                    this.CustomMetricParameters.Equals(input.CustomMetricParameters))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) && 
                (
                    this.ValidationSplit == input.ValidationSplit ||
                    (this.ValidationSplit != null &&
                    this.ValidationSplit.Equals(input.ValidationSplit))
                ) && 
                (
                    this.RandomSeed == input.RandomSeed ||
                    (this.RandomSeed != null &&
                    this.RandomSeed.Equals(input.RandomSeed))
                ) && 
                (
                    this.ProblemType == input.ProblemType ||
                    (this.ProblemType != null &&
                    this.ProblemType.Equals(input.ProblemType))
                ) && 
                (
                    this.BinaryOptimizationMetric == input.BinaryOptimizationMetric ||
                    (this.BinaryOptimizationMetric != null &&
                    this.BinaryOptimizationMetric.Equals(input.BinaryOptimizationMetric))
                ) && 
                (
                    this.RegressionOptimizationMetric == input.RegressionOptimizationMetric ||
                    (this.RegressionOptimizationMetric != null &&
                    this.RegressionOptimizationMetric.Equals(input.RegressionOptimizationMetric))
                ) && 
                (
                    this.NEstimators == input.NEstimators ||
                    (this.NEstimators != null &&
                    this.NEstimators.Equals(input.NEstimators))
                ) && 
                (
                    this.MaxDepth == input.MaxDepth ||
                    (this.MaxDepth != null &&
                    this.MaxDepth.Equals(input.MaxDepth))
                ) && 
                (
                    this.MinChildWeight == input.MinChildWeight ||
                    (this.MinChildWeight != null &&
                    this.MinChildWeight.Equals(input.MinChildWeight))
                ) && 
                (
                    this.Gamma == input.Gamma ||
                    (this.Gamma != null &&
                    this.Gamma.Equals(input.Gamma))
                ) && 
                (
                    this.Subsample == input.Subsample ||
                    (this.Subsample != null &&
                    this.Subsample.Equals(input.Subsample))
                ) && 
                (
                    this.ColsampleBytree == input.ColsampleBytree ||
                    (this.ColsampleBytree != null &&
                    this.ColsampleBytree.Equals(input.ColsampleBytree))
                ) && 
                (
                    this.RegAlpha == input.RegAlpha ||
                    (this.RegAlpha != null &&
                    this.RegAlpha.Equals(input.RegAlpha))
                ) && 
                (
                    this.LearningRate == input.LearningRate ||
                    (this.LearningRate != null &&
                    this.LearningRate.Equals(input.LearningRate))
                ) && 
                (
                    this.EngineConfig == input.EngineConfig ||
                    (this.EngineConfig != null &&
                    this.EngineConfig.Equals(input.EngineConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                if (this.ValidationSetId != null)
                    hashCode = hashCode * 59 + this.ValidationSetId.GetHashCode();
                if (this.CustomMetricId != null)
                    hashCode = hashCode * 59 + this.CustomMetricId.GetHashCode();
                if (this.CustomMetric != null)
                    hashCode = hashCode * 59 + this.CustomMetric.GetHashCode();
                if (this.CustomMetricMinimization != null)
                    hashCode = hashCode * 59 + this.CustomMetricMinimization.GetHashCode();
                if (this.BinaryClassificationThreshold != null)
                    hashCode = hashCode * 59 + this.BinaryClassificationThreshold.GetHashCode();
                if (this.CustomMetricParameters != null)
                    hashCode = hashCode * 59 + this.CustomMetricParameters.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.ValidationSplit != null)
                    hashCode = hashCode * 59 + this.ValidationSplit.GetHashCode();
                if (this.RandomSeed != null)
                    hashCode = hashCode * 59 + this.RandomSeed.GetHashCode();
                if (this.ProblemType != null)
                    hashCode = hashCode * 59 + this.ProblemType.GetHashCode();
                if (this.BinaryOptimizationMetric != null)
                    hashCode = hashCode * 59 + this.BinaryOptimizationMetric.GetHashCode();
                if (this.RegressionOptimizationMetric != null)
                    hashCode = hashCode * 59 + this.RegressionOptimizationMetric.GetHashCode();
                if (this.NEstimators != null)
                    hashCode = hashCode * 59 + this.NEstimators.GetHashCode();
                if (this.MaxDepth != null)
                    hashCode = hashCode * 59 + this.MaxDepth.GetHashCode();
                if (this.MinChildWeight != null)
                    hashCode = hashCode * 59 + this.MinChildWeight.GetHashCode();
                if (this.Gamma != null)
                    hashCode = hashCode * 59 + this.Gamma.GetHashCode();
                if (this.Subsample != null)
                    hashCode = hashCode * 59 + this.Subsample.GetHashCode();
                if (this.ColsampleBytree != null)
                    hashCode = hashCode * 59 + this.ColsampleBytree.GetHashCode();
                if (this.RegAlpha != null)
                    hashCode = hashCode * 59 + this.RegAlpha.GetHashCode();
                if (this.LearningRate != null)
                    hashCode = hashCode * 59 + this.LearningRate.GetHashCode();
                if (this.EngineConfig != null)
                    hashCode = hashCode * 59 + this.EngineConfig.GetHashCode();
                return hashCode;
            }
        }
    }

}
