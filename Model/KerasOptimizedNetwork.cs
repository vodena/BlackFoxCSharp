/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// KerasOptimizedNetwork
    /// </summary>
    [DataContract]
    public partial class KerasOptimizedNetwork :  IEquatable<KerasOptimizedNetwork>
    {
        /// <summary>
        /// Defines TrainingAlgorithm
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrainingAlgorithmEnum
        {
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 1,
            
            /// <summary>
            /// Enum RMSprop for value: RMSprop
            /// </summary>
            [EnumMember(Value = "RMSprop")]
            RMSprop = 2,
            
            /// <summary>
            /// Enum Adagrad for value: Adagrad
            /// </summary>
            [EnumMember(Value = "Adagrad")]
            Adagrad = 3,
            
            /// <summary>
            /// Enum Adadelta for value: Adadelta
            /// </summary>
            [EnumMember(Value = "Adadelta")]
            Adadelta = 4,
            
            /// <summary>
            /// Enum Adam for value: Adam
            /// </summary>
            [EnumMember(Value = "Adam")]
            Adam = 5,
            
            /// <summary>
            /// Enum Adamax for value: Adamax
            /// </summary>
            [EnumMember(Value = "Adamax")]
            Adamax = 6,
            
            /// <summary>
            /// Enum Nadam for value: Nadam
            /// </summary>
            [EnumMember(Value = "Nadam")]
            Nadam = 7
        }

        /// <summary>
        /// Gets or Sets TrainingAlgorithm
        /// </summary>
        [DataMember(Name="trainingAlgorithm", EmitDefaultValue=false)]
        public TrainingAlgorithmEnum? TrainingAlgorithm { get; set; }
        /// <summary>
        /// Defines OutputLayerActivationFunction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputLayerActivationFunctionEnum
        {
            
            /// <summary>
            /// Enum SoftMax for value: SoftMax
            /// </summary>
            [EnumMember(Value = "SoftMax")]
            SoftMax = 1,
            
            /// <summary>
            /// Enum Elu for value: Elu
            /// </summary>
            [EnumMember(Value = "Elu")]
            Elu = 2,
            
            /// <summary>
            /// Enum Selu for value: Selu
            /// </summary>
            [EnumMember(Value = "Selu")]
            Selu = 3,
            
            /// <summary>
            /// Enum SoftPlus for value: SoftPlus
            /// </summary>
            [EnumMember(Value = "SoftPlus")]
            SoftPlus = 4,
            
            /// <summary>
            /// Enum SoftSign for value: SoftSign
            /// </summary>
            [EnumMember(Value = "SoftSign")]
            SoftSign = 5,
            
            /// <summary>
            /// Enum ReLu for value: ReLu
            /// </summary>
            [EnumMember(Value = "ReLu")]
            ReLu = 6,
            
            /// <summary>
            /// Enum TanH for value: TanH
            /// </summary>
            [EnumMember(Value = "TanH")]
            TanH = 7,
            
            /// <summary>
            /// Enum Sigmoid for value: Sigmoid
            /// </summary>
            [EnumMember(Value = "Sigmoid")]
            Sigmoid = 8,
            
            /// <summary>
            /// Enum HardSigmoid for value: HardSigmoid
            /// </summary>
            [EnumMember(Value = "HardSigmoid")]
            HardSigmoid = 9,
            
            /// <summary>
            /// Enum Linear for value: Linear
            /// </summary>
            [EnumMember(Value = "Linear")]
            Linear = 10
        }

        /// <summary>
        /// Gets or Sets OutputLayerActivationFunction
        /// </summary>
        [DataMember(Name="outputLayerActivationFunction", EmitDefaultValue=false)]
        public OutputLayerActivationFunctionEnum? OutputLayerActivationFunction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasOptimizedNetwork" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="hiddenLayers">hiddenLayers.</param>
        /// <param name="trainingAlgorithm">trainingAlgorithm.</param>
        /// <param name="outputLayerActivationFunction">outputLayerActivationFunction.</param>
        public KerasOptimizedNetwork(string id = default(string), List<KerasHiddenLayerConfig> hiddenLayers = default(List<KerasHiddenLayerConfig>), TrainingAlgorithmEnum? trainingAlgorithm = default(TrainingAlgorithmEnum?), OutputLayerActivationFunctionEnum? outputLayerActivationFunction = default(OutputLayerActivationFunctionEnum?))
        {
            this.Id = id;
            this.HiddenLayers = hiddenLayers;
            this.TrainingAlgorithm = trainingAlgorithm;
            this.OutputLayerActivationFunction = outputLayerActivationFunction;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets HiddenLayers
        /// </summary>
        [DataMember(Name="hiddenLayers", EmitDefaultValue=false)]
        public List<KerasHiddenLayerConfig> HiddenLayers { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KerasOptimizedNetwork {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  HiddenLayers: ").Append(HiddenLayers).Append("\n");
            sb.Append("  TrainingAlgorithm: ").Append(TrainingAlgorithm).Append("\n");
            sb.Append("  OutputLayerActivationFunction: ").Append(OutputLayerActivationFunction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerasOptimizedNetwork);
        }

        /// <summary>
        /// Returns true if KerasOptimizedNetwork instances are equal
        /// </summary>
        /// <param name="input">Instance of KerasOptimizedNetwork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerasOptimizedNetwork input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.HiddenLayers == input.HiddenLayers ||
                    this.HiddenLayers != null &&
                    this.HiddenLayers.SequenceEqual(input.HiddenLayers)
                ) && 
                (
                    this.TrainingAlgorithm == input.TrainingAlgorithm ||
                    (this.TrainingAlgorithm != null &&
                    this.TrainingAlgorithm.Equals(input.TrainingAlgorithm))
                ) && 
                (
                    this.OutputLayerActivationFunction == input.OutputLayerActivationFunction ||
                    (this.OutputLayerActivationFunction != null &&
                    this.OutputLayerActivationFunction.Equals(input.OutputLayerActivationFunction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.HiddenLayers != null)
                    hashCode = hashCode * 59 + this.HiddenLayers.GetHashCode();
                if (this.TrainingAlgorithm != null)
                    hashCode = hashCode * 59 + this.TrainingAlgorithm.GetHashCode();
                if (this.OutputLayerActivationFunction != null)
                    hashCode = hashCode * 59 + this.OutputLayerActivationFunction.GetHashCode();
                return hashCode;
            }
        }
    }

}
