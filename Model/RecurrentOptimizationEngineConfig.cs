/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// RecurrentOptimizationEngineConfig
    /// </summary>
    [DataContract]
    public partial class RecurrentOptimizationEngineConfig :  IEquatable<RecurrentOptimizationEngineConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrentOptimizationEngineConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecurrentOptimizationEngineConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrentOptimizationEngineConfig" /> class.
        /// </summary>
        /// <param name="crossoverDistributionIndex">crossoverDistributionIndex.</param>
        /// <param name="crossoverProbability">crossoverProbability.</param>
        /// <param name="mutationDistributionIndex">mutationDistributionIndex.</param>
        /// <param name="mutationProbability">mutationProbability.</param>
        /// <param name="procTimeoutSeconds">Time in seconds in which individual network must finish training.  If not finished in time error will have maximum value. (required).</param>
        /// <param name="maxNumOfGenerations">Maximum number of generations in which to find optimal network.</param>
        /// <param name="populationSize">Number of individials in one generation.</param>
        /// <param name="hyperVolume">Define hyper volume for early stopping.</param>
        public RecurrentOptimizationEngineConfig(int? crossoverDistributionIndex = default(int?), double? crossoverProbability = default(double?), int? mutationDistributionIndex = default(int?), double? mutationProbability = default(double?), int? procTimeoutSeconds = default(int?), int? maxNumOfGenerations = default(int?), int? populationSize = default(int?), ConvergencyCriterion hyperVolume = default(ConvergencyCriterion))
        {
            // to ensure "procTimeoutSeconds" is required (not null)
            if (procTimeoutSeconds == null)
            {
                throw new InvalidDataException("procTimeoutSeconds is a required property for RecurrentOptimizationEngineConfig and cannot be null");
            }
            else
            {
                this.ProcTimeoutSeconds = procTimeoutSeconds;
            }
            this.CrossoverDistributionIndex = crossoverDistributionIndex;
            this.CrossoverProbability = crossoverProbability;
            this.MutationDistributionIndex = mutationDistributionIndex;
            this.MutationProbability = mutationProbability;
            this.MaxNumOfGenerations = maxNumOfGenerations;
            this.PopulationSize = populationSize;
            this.HyperVolume = hyperVolume;
        }
        
        /// <summary>
        /// Gets or Sets CrossoverDistributionIndex
        /// </summary>
        [DataMember(Name="crossoverDistributionIndex", EmitDefaultValue=false)]
        public int? CrossoverDistributionIndex { get; set; }

        /// <summary>
        /// Gets or Sets CrossoverProbability
        /// </summary>
        [DataMember(Name="crossoverProbability", EmitDefaultValue=false)]
        public double? CrossoverProbability { get; set; }

        /// <summary>
        /// Gets or Sets MutationDistributionIndex
        /// </summary>
        [DataMember(Name="mutationDistributionIndex", EmitDefaultValue=false)]
        public int? MutationDistributionIndex { get; set; }

        /// <summary>
        /// Gets or Sets MutationProbability
        /// </summary>
        [DataMember(Name="mutationProbability", EmitDefaultValue=false)]
        public double? MutationProbability { get; set; }

        /// <summary>
        /// Time in seconds in which individual network must finish training.  If not finished in time error will have maximum value.
        /// </summary>
        /// <value>Time in seconds in which individual network must finish training.  If not finished in time error will have maximum value.</value>
        [DataMember(Name="procTimeoutSeconds", EmitDefaultValue=false)]
        public int? ProcTimeoutSeconds { get; set; }

        /// <summary>
        /// Maximum number of generations in which to find optimal network
        /// </summary>
        /// <value>Maximum number of generations in which to find optimal network</value>
        [DataMember(Name="maxNumOfGenerations", EmitDefaultValue=false)]
        public int? MaxNumOfGenerations { get; set; }

        /// <summary>
        /// Number of individials in one generation
        /// </summary>
        /// <value>Number of individials in one generation</value>
        [DataMember(Name="populationSize", EmitDefaultValue=false)]
        public int? PopulationSize { get; set; }

        /// <summary>
        /// Define hyper volume for early stopping
        /// </summary>
        /// <value>Define hyper volume for early stopping</value>
        [DataMember(Name="hyperVolume", EmitDefaultValue=false)]
        public ConvergencyCriterion HyperVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecurrentOptimizationEngineConfig {\n");
            sb.Append("  CrossoverDistributionIndex: ").Append(CrossoverDistributionIndex).Append("\n");
            sb.Append("  CrossoverProbability: ").Append(CrossoverProbability).Append("\n");
            sb.Append("  MutationDistributionIndex: ").Append(MutationDistributionIndex).Append("\n");
            sb.Append("  MutationProbability: ").Append(MutationProbability).Append("\n");
            sb.Append("  ProcTimeoutSeconds: ").Append(ProcTimeoutSeconds).Append("\n");
            sb.Append("  MaxNumOfGenerations: ").Append(MaxNumOfGenerations).Append("\n");
            sb.Append("  PopulationSize: ").Append(PopulationSize).Append("\n");
            sb.Append("  HyperVolume: ").Append(HyperVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurrentOptimizationEngineConfig);
        }

        /// <summary>
        /// Returns true if RecurrentOptimizationEngineConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurrentOptimizationEngineConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurrentOptimizationEngineConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CrossoverDistributionIndex == input.CrossoverDistributionIndex ||
                    (this.CrossoverDistributionIndex != null &&
                    this.CrossoverDistributionIndex.Equals(input.CrossoverDistributionIndex))
                ) && 
                (
                    this.CrossoverProbability == input.CrossoverProbability ||
                    (this.CrossoverProbability != null &&
                    this.CrossoverProbability.Equals(input.CrossoverProbability))
                ) && 
                (
                    this.MutationDistributionIndex == input.MutationDistributionIndex ||
                    (this.MutationDistributionIndex != null &&
                    this.MutationDistributionIndex.Equals(input.MutationDistributionIndex))
                ) && 
                (
                    this.MutationProbability == input.MutationProbability ||
                    (this.MutationProbability != null &&
                    this.MutationProbability.Equals(input.MutationProbability))
                ) && 
                (
                    this.ProcTimeoutSeconds == input.ProcTimeoutSeconds ||
                    (this.ProcTimeoutSeconds != null &&
                    this.ProcTimeoutSeconds.Equals(input.ProcTimeoutSeconds))
                ) && 
                (
                    this.MaxNumOfGenerations == input.MaxNumOfGenerations ||
                    (this.MaxNumOfGenerations != null &&
                    this.MaxNumOfGenerations.Equals(input.MaxNumOfGenerations))
                ) && 
                (
                    this.PopulationSize == input.PopulationSize ||
                    (this.PopulationSize != null &&
                    this.PopulationSize.Equals(input.PopulationSize))
                ) && 
                (
                    this.HyperVolume == input.HyperVolume ||
                    (this.HyperVolume != null &&
                    this.HyperVolume.Equals(input.HyperVolume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CrossoverDistributionIndex != null)
                    hashCode = hashCode * 59 + this.CrossoverDistributionIndex.GetHashCode();
                if (this.CrossoverProbability != null)
                    hashCode = hashCode * 59 + this.CrossoverProbability.GetHashCode();
                if (this.MutationDistributionIndex != null)
                    hashCode = hashCode * 59 + this.MutationDistributionIndex.GetHashCode();
                if (this.MutationProbability != null)
                    hashCode = hashCode * 59 + this.MutationProbability.GetHashCode();
                if (this.ProcTimeoutSeconds != null)
                    hashCode = hashCode * 59 + this.ProcTimeoutSeconds.GetHashCode();
                if (this.MaxNumOfGenerations != null)
                    hashCode = hashCode * 59 + this.MaxNumOfGenerations.GetHashCode();
                if (this.PopulationSize != null)
                    hashCode = hashCode * 59 + this.PopulationSize.GetHashCode();
                if (this.HyperVolume != null)
                    hashCode = hashCode * 59 + this.HyperVolume.GetHashCode();
                return hashCode;
            }
        }
    }

}
