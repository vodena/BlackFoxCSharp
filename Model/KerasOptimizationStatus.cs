/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// KerasOptimizationStatus
    /// </summary>
    [DataContract]
    public partial class KerasOptimizationStatus :  IEquatable<KerasOptimizationStatus>
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,
            
            /// <summary>
            /// Enum Finished for value: Finished
            /// </summary>
            [EnumMember(Value = "Finished")]
            Finished = 2,
            
            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 3,
            
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 4
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KerasOptimizationStatus" /> class.
        /// </summary>
        /// <param name="state">state.</param>
        /// <param name="generation">generation.</param>
        /// <param name="totalGenerations">totalGenerations.</param>
        /// <param name="validationSetError">validationSetError.</param>
        /// <param name="trainingSetError">trainingSetError.</param>
        /// <param name="epoch">epoch.</param>
        /// <param name="network">network.</param>
        public KerasOptimizationStatus(StateEnum? state = default(StateEnum?), int? generation = default(int?), int? totalGenerations = default(int?), double? validationSetError = default(double?), double? trainingSetError = default(double?), int? epoch = default(int?), KerasOptimizedNetwork network = default(KerasOptimizedNetwork))
        {
            this.State = state;
            this.Generation = generation;
            this.TotalGenerations = totalGenerations;
            this.ValidationSetError = validationSetError;
            this.TrainingSetError = trainingSetError;
            this.Epoch = epoch;
            this.Network = network;
        }
        

        /// <summary>
        /// Gets or Sets Generation
        /// </summary>
        [DataMember(Name="generation", EmitDefaultValue=false)]
        public int? Generation { get; set; }

        /// <summary>
        /// Gets or Sets TotalGenerations
        /// </summary>
        [DataMember(Name="totalGenerations", EmitDefaultValue=false)]
        public int? TotalGenerations { get; set; }

        /// <summary>
        /// Gets or Sets ValidationSetError
        /// </summary>
        [DataMember(Name="validationSetError", EmitDefaultValue=false)]
        public double? ValidationSetError { get; set; }

        /// <summary>
        /// Gets or Sets TrainingSetError
        /// </summary>
        [DataMember(Name="trainingSetError", EmitDefaultValue=false)]
        public double? TrainingSetError { get; set; }

        /// <summary>
        /// Gets or Sets Epoch
        /// </summary>
        [DataMember(Name="epoch", EmitDefaultValue=false)]
        public int? Epoch { get; set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public KerasOptimizedNetwork Network { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KerasOptimizationStatus {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  TotalGenerations: ").Append(TotalGenerations).Append("\n");
            sb.Append("  ValidationSetError: ").Append(ValidationSetError).Append("\n");
            sb.Append("  TrainingSetError: ").Append(TrainingSetError).Append("\n");
            sb.Append("  Epoch: ").Append(Epoch).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerasOptimizationStatus);
        }

        /// <summary>
        /// Returns true if KerasOptimizationStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of KerasOptimizationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerasOptimizationStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Generation == input.Generation ||
                    (this.Generation != null &&
                    this.Generation.Equals(input.Generation))
                ) && 
                (
                    this.TotalGenerations == input.TotalGenerations ||
                    (this.TotalGenerations != null &&
                    this.TotalGenerations.Equals(input.TotalGenerations))
                ) && 
                (
                    this.ValidationSetError == input.ValidationSetError ||
                    (this.ValidationSetError != null &&
                    this.ValidationSetError.Equals(input.ValidationSetError))
                ) && 
                (
                    this.TrainingSetError == input.TrainingSetError ||
                    (this.TrainingSetError != null &&
                    this.TrainingSetError.Equals(input.TrainingSetError))
                ) && 
                (
                    this.Epoch == input.Epoch ||
                    (this.Epoch != null &&
                    this.Epoch.Equals(input.Epoch))
                ) && 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Generation != null)
                    hashCode = hashCode * 59 + this.Generation.GetHashCode();
                if (this.TotalGenerations != null)
                    hashCode = hashCode * 59 + this.TotalGenerations.GetHashCode();
                if (this.ValidationSetError != null)
                    hashCode = hashCode * 59 + this.ValidationSetError.GetHashCode();
                if (this.TrainingSetError != null)
                    hashCode = hashCode * 59 + this.TrainingSetError.GetHashCode();
                if (this.Epoch != null)
                    hashCode = hashCode * 59 + this.Epoch.GetHashCode();
                if (this.Network != null)
                    hashCode = hashCode * 59 + this.Network.GetHashCode();
                return hashCode;
            }
        }
    }

}
