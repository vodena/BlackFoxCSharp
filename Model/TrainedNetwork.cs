/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = BlackFoxCSharp.Client.OpenAPIDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// TrainedNetwork
    /// </summary>
    [DataContract]
    public partial class TrainedNetwork :  IEquatable<TrainedNetwork>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainedNetwork" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="epochCount">epochCount.</param>
        /// <param name="errorsOnValidationSet">errorsOnValidationSet.</param>
        /// <param name="errorsOnTrainingSet">errorsOnTrainingSet.</param>
        public TrainedNetwork(string id = default(string), int epochCount = default(int), List<double> errorsOnValidationSet = default(List<double>), List<double> errorsOnTrainingSet = default(List<double>))
        {
            this.Id = id;
            this.ErrorsOnValidationSet = errorsOnValidationSet;
            this.ErrorsOnTrainingSet = errorsOnTrainingSet;
            this.Id = id;
            this.EpochCount = epochCount;
            this.ErrorsOnValidationSet = errorsOnValidationSet;
            this.ErrorsOnTrainingSet = errorsOnTrainingSet;
        }

        public TrainedNetwork() { }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets EpochCount
        /// </summary>
        [DataMember(Name="epochCount", EmitDefaultValue=false)]
        public int EpochCount { get; set; }

        /// <summary>
        /// Gets or Sets ErrorsOnValidationSet
        /// </summary>
        [DataMember(Name="errorsOnValidationSet", EmitDefaultValue=true)]
        public List<double> ErrorsOnValidationSet { get; set; }

        /// <summary>
        /// Gets or Sets ErrorsOnTrainingSet
        /// </summary>
        [DataMember(Name="errorsOnTrainingSet", EmitDefaultValue=true)]
        public List<double> ErrorsOnTrainingSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrainedNetwork {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EpochCount: ").Append(EpochCount).Append("\n");
            sb.Append("  ErrorsOnValidationSet: ").Append(ErrorsOnValidationSet).Append("\n");
            sb.Append("  ErrorsOnTrainingSet: ").Append(ErrorsOnTrainingSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrainedNetwork);
        }

        /// <summary>
        /// Returns true if TrainedNetwork instances are equal
        /// </summary>
        /// <param name="input">Instance of TrainedNetwork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrainedNetwork input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EpochCount == input.EpochCount ||
                    (this.EpochCount != null &&
                    this.EpochCount.Equals(input.EpochCount))
                ) && 
                (
                    this.ErrorsOnValidationSet == input.ErrorsOnValidationSet ||
                    this.ErrorsOnValidationSet != null &&
                    input.ErrorsOnValidationSet != null &&
                    this.ErrorsOnValidationSet.SequenceEqual(input.ErrorsOnValidationSet)
                ) && 
                (
                    this.ErrorsOnTrainingSet == input.ErrorsOnTrainingSet ||
                    this.ErrorsOnTrainingSet != null &&
                    input.ErrorsOnTrainingSet != null &&
                    this.ErrorsOnTrainingSet.SequenceEqual(input.ErrorsOnTrainingSet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EpochCount != null)
                    hashCode = hashCode * 59 + this.EpochCount.GetHashCode();
                if (this.ErrorsOnValidationSet != null)
                    hashCode = hashCode * 59 + this.ErrorsOnValidationSet.GetHashCode();
                if (this.ErrorsOnTrainingSet != null)
                    hashCode = hashCode * 59 + this.ErrorsOnTrainingSet.GetHashCode();
                return hashCode;
            }
        }
    }

}
