/* 
 * BlackFox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlackFoxCSharp.Client.SwaggerDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// Confuguration for predicting values from array
    /// </summary>
    [DataContract]
    public partial class PredictionArrayConfig :  IEquatable<PredictionArrayConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PredictionArrayConfig" /> class.
        /// </summary>
        /// <param name="dataSet">dataSet.</param>
        /// <param name="networkId">networkId.</param>
        /// <param name="inputRanges">inputRanges.</param>
        /// <param name="outputRanges">outputRanges.</param>
        public PredictionArrayConfig(List<List<double?>> dataSet = default(List<List<double?>>), string networkId = default(string), List<Range> inputRanges = default(List<Range>), List<Range> outputRanges = default(List<Range>))
        {
            this.DataSet = dataSet;
            this.NetworkId = networkId;
            this.InputRanges = inputRanges;
            this.OutputRanges = outputRanges;
        }
        
        /// <summary>
        /// Gets or Sets DataSet
        /// </summary>
        [DataMember(Name="dataSet", EmitDefaultValue=false)]
        public List<List<double?>> DataSet { get; set; }

        /// <summary>
        /// Gets or Sets NetworkId
        /// </summary>
        [DataMember(Name="networkId", EmitDefaultValue=false)]
        public string NetworkId { get; set; }

        /// <summary>
        /// Gets or Sets InputRanges
        /// </summary>
        [DataMember(Name="inputRanges", EmitDefaultValue=false)]
        public List<Range> InputRanges { get; set; }

        /// <summary>
        /// Gets or Sets OutputRanges
        /// </summary>
        [DataMember(Name="outputRanges", EmitDefaultValue=false)]
        public List<Range> OutputRanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PredictionArrayConfig {\n");
            sb.Append("  DataSet: ").Append(DataSet).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  InputRanges: ").Append(InputRanges).Append("\n");
            sb.Append("  OutputRanges: ").Append(OutputRanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PredictionArrayConfig);
        }

        /// <summary>
        /// Returns true if PredictionArrayConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of PredictionArrayConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PredictionArrayConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataSet == input.DataSet ||
                    this.DataSet != null &&
                    this.DataSet.SequenceEqual(input.DataSet)
                ) && 
                (
                    this.NetworkId == input.NetworkId ||
                    (this.NetworkId != null &&
                    this.NetworkId.Equals(input.NetworkId))
                ) && 
                (
                    this.InputRanges == input.InputRanges ||
                    this.InputRanges != null &&
                    this.InputRanges.SequenceEqual(input.InputRanges)
                ) && 
                (
                    this.OutputRanges == input.OutputRanges ||
                    this.OutputRanges != null &&
                    this.OutputRanges.SequenceEqual(input.OutputRanges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSet != null)
                    hashCode = hashCode * 59 + this.DataSet.GetHashCode();
                if (this.NetworkId != null)
                    hashCode = hashCode * 59 + this.NetworkId.GetHashCode();
                if (this.InputRanges != null)
                    hashCode = hashCode * 59 + this.InputRanges.GetHashCode();
                if (this.OutputRanges != null)
                    hashCode = hashCode * 59 + this.OutputRanges.GetHashCode();
                return hashCode;
            }
        }
    }

}
