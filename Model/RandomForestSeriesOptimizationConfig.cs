/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = BlackFoxCSharp.Client.OpenAPIDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// RandomForestSeriesOptimizationConfig
    /// </summary>
    [DataContract]
    public partial class RandomForestSeriesOptimizationConfig :  IEquatable<RandomForestSeriesOptimizationConfig>
    {
        /// <summary>
        /// Defines the problem type. In case of binary classification,  there must be only one output column.
        /// </summary>
        /// <value>Defines the problem type. In case of binary classification,  there must be only one output column.</value>
        [DataMember(Name="problemType", EmitDefaultValue=false)]
        public ProblemType? ProblemType { get; set; }
        /// <summary>
        /// USED ONLY IN BINARY CLASSIFICATION.  Default metric: ROC_AUC (Area under ROC curve).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize.
        /// </summary>
        /// <value>USED ONLY IN BINARY CLASSIFICATION.  Default metric: ROC_AUC (Area under ROC curve).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize.</value>
        [DataMember(Name="binaryOptimizationMetric", EmitDefaultValue=false)]
        public BinaryMetric? BinaryOptimizationMetric { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RandomForestSeriesOptimizationConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RandomForestSeriesOptimizationConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RandomForestSeriesOptimizationConfig" /> class.
        /// </summary>
        /// <param name="inputWindowRangeConfigs">inputWindowRangeConfigs.</param>
        /// <param name="outputWindowConfigs">outputWindowConfigs.</param>
        /// <param name="outputSampleStep">outputSampleStep.</param>
        /// <param name="datasetId">Data set id on which to train model.</param>
        /// <param name="validationSetId">Data set id on which to validate model.</param>
        /// <param name="inputs">Define min and max value for each output column(feature), and is input optional.</param>
        /// <param name="outputRanges">Define min and max value for each output column(feature).</param>
        /// <param name="problemType">Defines the problem type. In case of binary classification,  there must be only one output column..</param>
        /// <param name="binaryOptimizationMetric">USED ONLY IN BINARY CLASSIFICATION.  Default metric: ROC_AUC (Area under ROC curve).   Depending on the task at hand, it is recommended to choose an appropriate metric to optimize..</param>
        /// <param name="validationSplit">Portion of data set to use for validation, must be between 0 and 1.   Used only when CrossValidation &#x3D; false. (required) (default to 0.2D).</param>
        /// <param name="randomSeed">Random number generator seed, if the value is zero, the rows will not be randomly shuffled  Used only if CrossValidation &#x3D; false (default to 300).</param>
        /// <param name="engineConfig">Optimization engine config.</param>
        /// <param name="numberOfEstimators">Number of estimators (required).</param>
        /// <param name="maxDepth">Max depth of tree (required).</param>
        /// <param name="maxFeatures">Max features (required).</param>
        public RandomForestSeriesOptimizationConfig(List<InputWindowRangeConfig> inputWindowRangeConfigs = default(List<InputWindowRangeConfig>), List<OutputWindowConfig> outputWindowConfigs = default(List<OutputWindowConfig>), int outputSampleStep = default(int), string datasetId = default(string), string validationSetId = default(string), List<InputConfig> inputs = default(List<InputConfig>), List<Range> outputRanges = default(List<Range>), ProblemType problemType = default(ProblemType), BinaryMetric binaryOptimizationMetric = default(BinaryMetric), double validationSplit = 0.2D, int? randomSeed = 300, OptimizationEngineConfig engineConfig = default(OptimizationEngineConfig), RangeInt numberOfEstimators = default(RangeInt), RangeInt maxDepth = default(RangeInt), Range maxFeatures = default(Range))
        {
            this.InputWindowRangeConfigs = inputWindowRangeConfigs;
            this.OutputWindowConfigs = outputWindowConfigs;
            this.DatasetId = datasetId;
            this.ValidationSetId = validationSetId;
            this.Inputs = inputs;
            this.OutputRanges = outputRanges;
            // to ensure "validationSplit" is required (not null)
            if (validationSplit == null)
            {
                throw new InvalidDataException("validationSplit is a required property for RandomForestSeriesOptimizationConfig and cannot be null");
            }
            else
            {
                this.ValidationSplit = validationSplit;
            }
            
            this.RandomSeed = randomSeed;
            this.EngineConfig = engineConfig;
            // to ensure "numberOfEstimators" is required (not null)
            if (numberOfEstimators == null)
            {
                throw new InvalidDataException("numberOfEstimators is a required property for RandomForestSeriesOptimizationConfig and cannot be null");
            }
            else
            {
                this.NumberOfEstimators = numberOfEstimators;
            }
            
            // to ensure "maxDepth" is required (not null)
            if (maxDepth == null)
            {
                throw new InvalidDataException("maxDepth is a required property for RandomForestSeriesOptimizationConfig and cannot be null");
            }
            else
            {
                this.MaxDepth = maxDepth;
            }
            
            // to ensure "maxFeatures" is required (not null)
            if (maxFeatures == null)
            {
                throw new InvalidDataException("maxFeatures is a required property for RandomForestSeriesOptimizationConfig and cannot be null");
            }
            else
            {
                this.MaxFeatures = maxFeatures;
            }
            
            this.InputWindowRangeConfigs = inputWindowRangeConfigs;
            this.OutputWindowConfigs = outputWindowConfigs;
            this.OutputSampleStep = outputSampleStep;
            this.DatasetId = datasetId;
            this.ValidationSetId = validationSetId;
            this.Inputs = inputs;
            this.OutputRanges = outputRanges;
            this.ProblemType = problemType;
            this.BinaryOptimizationMetric = binaryOptimizationMetric;
            // use default value if no "randomSeed" provided
            if (randomSeed == null)
            {
                this.RandomSeed = 300;
            }
            else
            {
                this.RandomSeed = randomSeed;
            }
            this.EngineConfig = engineConfig;
        }
        
        /// <summary>
        /// Gets or Sets InputWindowRangeConfigs
        /// </summary>
        [DataMember(Name="inputWindowRangeConfigs", EmitDefaultValue=true)]
        public List<InputWindowRangeConfig> InputWindowRangeConfigs { get; set; }

        /// <summary>
        /// Gets or Sets OutputWindowConfigs
        /// </summary>
        [DataMember(Name="outputWindowConfigs", EmitDefaultValue=true)]
        public List<OutputWindowConfig> OutputWindowConfigs { get; set; }

        /// <summary>
        /// Gets or Sets OutputSampleStep
        /// </summary>
        [DataMember(Name="outputSampleStep", EmitDefaultValue=false)]
        public int OutputSampleStep { get; set; }

        /// <summary>
        /// Data set id on which to train model
        /// </summary>
        /// <value>Data set id on which to train model</value>
        [DataMember(Name="datasetId", EmitDefaultValue=true)]
        public string DatasetId { get; set; }

        /// <summary>
        /// Data set id on which to validate model
        /// </summary>
        /// <value>Data set id on which to validate model</value>
        [DataMember(Name="validationSetId", EmitDefaultValue=true)]
        public string ValidationSetId { get; set; }

        /// <summary>
        /// Define min and max value for each output column(feature), and is input optional
        /// </summary>
        /// <value>Define min and max value for each output column(feature), and is input optional</value>
        [DataMember(Name="inputs", EmitDefaultValue=true)]
        public List<InputConfig> Inputs { get; set; }

        /// <summary>
        /// Define min and max value for each output column(feature)
        /// </summary>
        /// <value>Define min and max value for each output column(feature)</value>
        [DataMember(Name="outputRanges", EmitDefaultValue=true)]
        public List<Range> OutputRanges { get; set; }



        /// <summary>
        /// Portion of data set to use for validation, must be between 0 and 1.   Used only when CrossValidation &#x3D; false.
        /// </summary>
        /// <value>Portion of data set to use for validation, must be between 0 and 1.   Used only when CrossValidation &#x3D; false.</value>
        [DataMember(Name="validationSplit", EmitDefaultValue=false)]
        public double ValidationSplit { get; set; }

        /// <summary>
        /// Random number generator seed, if the value is zero, the rows will not be randomly shuffled  Used only if CrossValidation &#x3D; false
        /// </summary>
        /// <value>Random number generator seed, if the value is zero, the rows will not be randomly shuffled  Used only if CrossValidation &#x3D; false</value>
        [DataMember(Name="randomSeed", EmitDefaultValue=true)]
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Optimization engine config
        /// </summary>
        /// <value>Optimization engine config</value>
        [DataMember(Name="engineConfig", EmitDefaultValue=true)]
        public OptimizationEngineConfig EngineConfig { get; set; }

        /// <summary>
        /// Number of estimators
        /// </summary>
        /// <value>Number of estimators</value>
        [DataMember(Name="numberOfEstimators", EmitDefaultValue=false)]
        public RangeInt NumberOfEstimators { get; set; }

        /// <summary>
        /// Max depth of tree
        /// </summary>
        /// <value>Max depth of tree</value>
        [DataMember(Name="maxDepth", EmitDefaultValue=false)]
        public RangeInt MaxDepth { get; set; }

        /// <summary>
        /// Max features
        /// </summary>
        /// <value>Max features</value>
        [DataMember(Name="maxFeatures", EmitDefaultValue=false)]
        public Range MaxFeatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RandomForestSeriesOptimizationConfig {\n");
            sb.Append("  InputWindowRangeConfigs: ").Append(InputWindowRangeConfigs).Append("\n");
            sb.Append("  OutputWindowConfigs: ").Append(OutputWindowConfigs).Append("\n");
            sb.Append("  OutputSampleStep: ").Append(OutputSampleStep).Append("\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  ValidationSetId: ").Append(ValidationSetId).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  OutputRanges: ").Append(OutputRanges).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  BinaryOptimizationMetric: ").Append(BinaryOptimizationMetric).Append("\n");
            sb.Append("  ValidationSplit: ").Append(ValidationSplit).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("  EngineConfig: ").Append(EngineConfig).Append("\n");
            sb.Append("  NumberOfEstimators: ").Append(NumberOfEstimators).Append("\n");
            sb.Append("  MaxDepth: ").Append(MaxDepth).Append("\n");
            sb.Append("  MaxFeatures: ").Append(MaxFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RandomForestSeriesOptimizationConfig);
        }

        /// <summary>
        /// Returns true if RandomForestSeriesOptimizationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of RandomForestSeriesOptimizationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RandomForestSeriesOptimizationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputWindowRangeConfigs == input.InputWindowRangeConfigs ||
                    this.InputWindowRangeConfigs != null &&
                    input.InputWindowRangeConfigs != null &&
                    this.InputWindowRangeConfigs.SequenceEqual(input.InputWindowRangeConfigs)
                ) && 
                (
                    this.OutputWindowConfigs == input.OutputWindowConfigs ||
                    this.OutputWindowConfigs != null &&
                    input.OutputWindowConfigs != null &&
                    this.OutputWindowConfigs.SequenceEqual(input.OutputWindowConfigs)
                ) && 
                (
                    this.OutputSampleStep == input.OutputSampleStep ||
                    (this.OutputSampleStep != null &&
                    this.OutputSampleStep.Equals(input.OutputSampleStep))
                ) && 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                ) && 
                (
                    this.ValidationSetId == input.ValidationSetId ||
                    (this.ValidationSetId != null &&
                    this.ValidationSetId.Equals(input.ValidationSetId))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.OutputRanges == input.OutputRanges ||
                    this.OutputRanges != null &&
                    input.OutputRanges != null &&
                    this.OutputRanges.SequenceEqual(input.OutputRanges)
                ) && 
                (
                    this.ProblemType == input.ProblemType ||
                    (this.ProblemType != null &&
                    this.ProblemType.Equals(input.ProblemType))
                ) && 
                (
                    this.BinaryOptimizationMetric == input.BinaryOptimizationMetric ||
                    (this.BinaryOptimizationMetric != null &&
                    this.BinaryOptimizationMetric.Equals(input.BinaryOptimizationMetric))
                ) && 
                (
                    this.ValidationSplit == input.ValidationSplit ||
                    (this.ValidationSplit != null &&
                    this.ValidationSplit.Equals(input.ValidationSplit))
                ) && 
                (
                    this.RandomSeed == input.RandomSeed ||
                    (this.RandomSeed != null &&
                    this.RandomSeed.Equals(input.RandomSeed))
                ) && 
                (
                    this.EngineConfig == input.EngineConfig ||
                    (this.EngineConfig != null &&
                    this.EngineConfig.Equals(input.EngineConfig))
                ) && 
                (
                    this.NumberOfEstimators == input.NumberOfEstimators ||
                    (this.NumberOfEstimators != null &&
                    this.NumberOfEstimators.Equals(input.NumberOfEstimators))
                ) && 
                (
                    this.MaxDepth == input.MaxDepth ||
                    (this.MaxDepth != null &&
                    this.MaxDepth.Equals(input.MaxDepth))
                ) && 
                (
                    this.MaxFeatures == input.MaxFeatures ||
                    (this.MaxFeatures != null &&
                    this.MaxFeatures.Equals(input.MaxFeatures))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputWindowRangeConfigs != null)
                    hashCode = hashCode * 59 + this.InputWindowRangeConfigs.GetHashCode();
                if (this.OutputWindowConfigs != null)
                    hashCode = hashCode * 59 + this.OutputWindowConfigs.GetHashCode();
                if (this.OutputSampleStep != null)
                    hashCode = hashCode * 59 + this.OutputSampleStep.GetHashCode();
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                if (this.ValidationSetId != null)
                    hashCode = hashCode * 59 + this.ValidationSetId.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.OutputRanges != null)
                    hashCode = hashCode * 59 + this.OutputRanges.GetHashCode();
                if (this.ProblemType != null)
                    hashCode = hashCode * 59 + this.ProblemType.GetHashCode();
                if (this.BinaryOptimizationMetric != null)
                    hashCode = hashCode * 59 + this.BinaryOptimizationMetric.GetHashCode();
                if (this.ValidationSplit != null)
                    hashCode = hashCode * 59 + this.ValidationSplit.GetHashCode();
                if (this.RandomSeed != null)
                    hashCode = hashCode * 59 + this.RandomSeed.GetHashCode();
                if (this.EngineConfig != null)
                    hashCode = hashCode * 59 + this.EngineConfig.GetHashCode();
                if (this.NumberOfEstimators != null)
                    hashCode = hashCode * 59 + this.NumberOfEstimators.GetHashCode();
                if (this.MaxDepth != null)
                    hashCode = hashCode * 59 + this.MaxDepth.GetHashCode();
                if (this.MaxFeatures != null)
                    hashCode = hashCode * 59 + this.MaxFeatures.GetHashCode();
                return hashCode;
            }
        }
    }

}
