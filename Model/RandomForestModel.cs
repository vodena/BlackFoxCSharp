/* 
 * BlackFox
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = BlackFoxCSharp.Client.OpenAPIDateConverter;

namespace BlackFoxCSharp.Model
{
    /// <summary>
    /// RandomForestModel
    /// </summary>
    [DataContract]
    public partial class RandomForestModel :  IEquatable<RandomForestModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RandomForestModel" /> class.
        /// </summary>
        /// <param name="numberOfEstimators">Number of estimators.</param>
        /// <param name="maxDepth">Max depth of tree.</param>
        /// <param name="maxFeatures">Max features.</param>
        /// <param name="featureSelection">А bool value for each input indicating whether that input is significant.</param>
        public RandomForestModel(int numberOfEstimators = default(int), int maxDepth = default(int), double maxFeatures = default(double), List<bool> featureSelection = default(List<bool>))
        {
            this.FeatureSelection = featureSelection;
            this.NumberOfEstimators = numberOfEstimators;
            this.MaxDepth = maxDepth;
            this.MaxFeatures = maxFeatures;
            this.FeatureSelection = featureSelection;
        }
        
        /// <summary>
        /// Number of estimators
        /// </summary>
        /// <value>Number of estimators</value>
        [DataMember(Name="numberOfEstimators", EmitDefaultValue=false)]
        public int NumberOfEstimators { get; set; }

        /// <summary>
        /// Max depth of tree
        /// </summary>
        /// <value>Max depth of tree</value>
        [DataMember(Name="maxDepth", EmitDefaultValue=false)]
        public int MaxDepth { get; set; }

        /// <summary>
        /// Max features
        /// </summary>
        /// <value>Max features</value>
        [DataMember(Name="maxFeatures", EmitDefaultValue=false)]
        public double MaxFeatures { get; set; }

        /// <summary>
        /// А bool value for each input indicating whether that input is significant
        /// </summary>
        /// <value>А bool value for each input indicating whether that input is significant</value>
        [DataMember(Name="featureSelection", EmitDefaultValue=true)]
        public List<bool> FeatureSelection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RandomForestModel {\n");
            sb.Append("  NumberOfEstimators: ").Append(NumberOfEstimators).Append("\n");
            sb.Append("  MaxDepth: ").Append(MaxDepth).Append("\n");
            sb.Append("  MaxFeatures: ").Append(MaxFeatures).Append("\n");
            sb.Append("  FeatureSelection: ").Append(FeatureSelection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RandomForestModel);
        }

        /// <summary>
        /// Returns true if RandomForestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RandomForestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RandomForestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfEstimators == input.NumberOfEstimators ||
                    (this.NumberOfEstimators != null &&
                    this.NumberOfEstimators.Equals(input.NumberOfEstimators))
                ) && 
                (
                    this.MaxDepth == input.MaxDepth ||
                    (this.MaxDepth != null &&
                    this.MaxDepth.Equals(input.MaxDepth))
                ) && 
                (
                    this.MaxFeatures == input.MaxFeatures ||
                    (this.MaxFeatures != null &&
                    this.MaxFeatures.Equals(input.MaxFeatures))
                ) && 
                (
                    this.FeatureSelection == input.FeatureSelection ||
                    this.FeatureSelection != null &&
                    input.FeatureSelection != null &&
                    this.FeatureSelection.SequenceEqual(input.FeatureSelection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfEstimators != null)
                    hashCode = hashCode * 59 + this.NumberOfEstimators.GetHashCode();
                if (this.MaxDepth != null)
                    hashCode = hashCode * 59 + this.MaxDepth.GetHashCode();
                if (this.MaxFeatures != null)
                    hashCode = hashCode * 59 + this.MaxFeatures.GetHashCode();
                if (this.FeatureSelection != null)
                    hashCode = hashCode * 59 + this.FeatureSelection.GetHashCode();
                return hashCode;
            }
        }
    }

}
